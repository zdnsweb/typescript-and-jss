{"pageProps":{"rule":"# `prefer-optional-chain`\n\nPrefer using concise optional chain expressions instead of chained logical ands.\n\nTypeScript 3.7 added support for the optional chain operator.\nThis operator allows you to safely access properties and methods on objects when they are potentially `null` or `undefined`.\n\n```ts\ntype T = {\n  a?: {\n    b?: {\n      c: string;\n      method?: () => void;\n    };\n  };\n};\n\nfunction myFunc(foo: T | null) {\n  return foo?.a?.b?.c;\n}\n// is roughly equivalent to\nfunction myFunc(foo: T | null) {\n  return foo && foo.a && foo.a.b && foo.a.b.c;\n}\n// or\nfunction myFunc(foo: T | null) {\n  return (((foo || {}).a || {}).b || {}).c;\n}\n\nfunction myFunc(foo: T | null) {\n  return foo?.['a']?.b?.c;\n}\n// is roughly equivalent to\nfunction myFunc(foo: T | null) {\n  return foo && foo['a'] && foo['a'].b && foo['a'].b.c;\n}\n\nfunction myFunc(foo: T | null) {\n  return foo?.a?.b?.method?.();\n}\n// is roughly equivalent to\nfunction myFunc(foo: T | null) {\n  return foo && foo.a && foo.a.b && foo.a.b.method && foo.a.b.method();\n}\n```\n\nBecause the optional chain operator _only_ chains when the property value is `null` or `undefined`, it is much safer than relying upon logical AND operator chaining `&&`; which chains on any _truthy_ value.\n\n## Rule Details\n\nThis rule aims enforce the usage of the safer operator.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nfoo && foo.a && foo.a.b && foo.a.b.c;\nfoo && foo['a'] && foo['a'].b && foo['a'].b.c;\nfoo && foo.a && foo.a.b && foo.a.b.method && foo.a.b.method();\n\n(((foo || {}).a || {}).b {}).c;\n(((foo || {})['a'] || {}).b {}).c;\n\n// this rule also supports converting chained strict nullish checks:\nfoo &&\n  foo.a != null &&\n  foo.a.b !== null &&\n  foo.a.b.c != undefined &&\n  foo.a.b.c.d !== undefined &&\n  foo.a.b.c.d.e;\n```\n\n### ‚úÖ Correct\n\n```ts\nfoo?.a?.b?.c;\nfoo?.['a']?.b?.c;\nfoo?.a?.b?.method?.();\n\nfoo?.a?.b?.c?.d?.e;\n```\n\n**Note:** there are a few edge cases where this rule will false positive. Use your best judgement when evaluating reported errors.\n\n## When Not To Use It\n\nIf you are not using TypeScript 3.7 (or greater), then you will not be able to use this rule, as the operator is not supported.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Optional Chaining Proposal](https://github.com/tc39/proposal-optional-chaining/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}