{"pageProps":{"rule":"# `await-thenable`\n\nDisallows awaiting a value that is not a Thenable.\n\nThis rule disallows awaiting a value that is not a \"Thenable\" (an object which has `then` method, such as a Promise).\nWhile it is valid JavaScript to await a non-`Promise`-like value (it will resolve immediately), this pattern is often a programmer error, such as forgetting to add parenthesis to call a function that returns a Promise.\n\n## Rule Details\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\nawait 'value';\n\nconst createValue = () => 'value';\nawait createValue();\n```\n\n### ✅ Correct\n\n```ts\nawait Promise.resolve('value');\n\nconst createValue = async () => 'value';\nawait createValue();\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/await-thenable\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## When Not To Use It\n\nIf you want to allow code to `await` non-Promise values.\nThis is generally not preferred, but can sometimes be useful for visual consistency.\n\n## Related To\n\n- TSLint: ['await-promise'](https://palantir.github.io/tslint/rules/await-promise)\n\n## Attributes\n\n- [x] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}