{"pageProps":{"rule":"# `switch-exhaustiveness-check`\n\nExhaustiveness checking in switch with union type.\n\nUnion type may have a lot of parts. It's easy to forget to consider all cases in switch. This rule reminds which parts are missing. If domain of the problem requires to have only a partial switch, developer may _explicitly_ add a default clause.\n\n## Rule Details\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\nconst day = 'Monday' as Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday': {\n    result = 1;\n    break;\n  }\n}\n```\n\n### ✅ Correct\n\n```ts\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\nconst day = 'Monday' as Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday': {\n    result = 1;\n    break;\n  }\n  case 'Tuesday': {\n    result = 2;\n    break;\n  }\n  case 'Wednesday': {\n    result = 3;\n    break;\n  }\n  case 'Thursday': {\n    result = 4;\n    break;\n  }\n  case 'Friday': {\n    result = 5;\n    break;\n  }\n  case 'Saturday': {\n    result = 6;\n    break;\n  }\n  case 'Sunday': {\n    result = 7;\n    break;\n  }\n}\n```\n\n### ✅ Correct\n\n```ts\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\nconst day = 'Monday' as Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday': {\n    result = 1;\n    break;\n  }\n  default: {\n    result = 42;\n  }\n}\n```\n\n## When Not To Use It\n\nIf program doesn't have union types with many parts. Downside of this rule is the need for type information, so it's slower than regular rules.\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}