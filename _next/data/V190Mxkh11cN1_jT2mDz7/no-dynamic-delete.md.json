{"pageProps":{"rule":"# `no-dynamic-delete`\n\nDisallow the delete operator with computed key expressions.\n\nDeleting dynamically computed keys can be dangerous and in some cases not well optimized.\n\n## Rule Details\n\nUsing the `delete` operator on keys that aren't runtime constants could be a sign that you're using the wrong data structures.\nUsing `Object`s with added and removed keys can cause occasional edge case bugs, such as if a key is named `\"hasOwnProperty\"`.\nConsider using a `Map` or `Set` if you‚Äôre storing collections of objects.\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n// Can be replaced with the constant equivalents, such as container.aaa\ndelete container['aaa'];\ndelete container['Infinity'];\n\n// Dynamic, difficult-to-reason-about lookups\nconst name = 'name';\ndelete container[name];\ndelete container[name.toUpperCase()];\n```\n\n### ‚úÖ Correct\n\n```ts\nconst container: { [i: string]: number } = {\n  /* ... */\n};\n\n// Constant runtime lookups by string index\ndelete container.aaa;\n\n// Constants that must be accessed by []\ndelete container[7];\ndelete container['-Infinity'];\n```\n\n## When Not To Use It\n\nWhen you know your keys are safe to delete, this rule can be unnecessary.\nSome environments such as older browsers might not support `Map` and `Set`.\n\nDo not consider this rule as performance advice before profiling your code's bottlenecks.\nEven repeated minor performance slowdowns likely do not significantly affect your application's general perceived speed.\n\n## Related To\n\n- TSLint: [no-dynamic-delete](https://palantir.github.io/tslint/rules/no-dynamic-delete)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}