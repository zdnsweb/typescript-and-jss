{"pageProps":{"rule":"# `no-meaningless-void-operator`\n\nDisallow the `void` operator except when used to discard a value.\n\nDisallow the `void` operator when its argument is already of type `void` or `undefined`.\n\n## Rule Details\n\nThe `void` operator is a useful tool to convey the programmer's intent to discard a value. For example, it is recommended as one way of suppressing [`@typescript-eslint/no-floating-promises`](./no-floating-promises.md) instead of adding `.catch()` to a promise.\n\nThis rule helps an author catch API changes where previously a value was being discarded at a call site, but the callee changed so it no longer returns a value. When combined with [no-unused-expressions](https://eslint.org/docs/rules/no-unused-expressions), it also helps _readers_ of the code by ensuring consistency: a statement that looks like `void foo();` is **always** discarding a return value, and a statement that looks like `foo();` is **never** discarding a return value.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\nvoid (() => {})();\n\nfunction foo() {}\nvoid foo();\n```\n\n### ✅ Correct\n\n```ts\n(() => {})();\n\nfunction foo() {}\nfoo(); // nothing to discard\n\nfunction bar(x: number) {\n  void x; // discarding a number\n  return 2;\n}\nvoid bar(); // discarding a number\n```\n\n## Options\n\nThis rule accepts a single object option with the following default configuration:\n\n```json\n{\n  \"@typescript-eslint/no-meaningless-void-operator\": [\n    \"error\",\n    {\n      \"checkNever\": false\n    }\n  ]\n}\n```\n\n- `checkNever: true` will suggest removing `void` when the argument has type `never`.\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [x] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}