{"pageProps":{"rule":"# `no-unnecessary-type-arguments`\n\nEnforces that type arguments will not be used if not required.\n\nWarns if an explicitly specified type argument is the default for that type parameter.\n\n## Rule Details\n\nType parameters in TypeScript may specify a default value.\nFor example:\n\n```ts\nfunction f<T = number>() {}\n```\n\nIt is redundant to provide an explicit type parameter equal to that default.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nfunction f<T = number>() {}\nf<number>();\n\nfunction g<T = number, U = string>() {}\ng<string, string>();\n\nclass C<T = number> {}\nfunction h(c: C<number>) {}\nnew C<number>();\nclass D extends C<number> {}\n\ninterface I<T = number> {}\nclass Impl implements I<number> {}\n```\n\n### ‚úÖ Correct\n\n```ts\nfunction f<T = number>() {}\nf<string>();\n\nfunction g<T = number, U = string>() {}\ng<number, number>();\n\nclass C<T = number> {}\nnew C<string>();\nclass D extends C<string> {}\n\ninterface I<T = number> {}\nclass Impl implements I<string> {}\n```\n\n## Related To\n\n- TSLint: [use-default-type-parameter](https://palantir.github.io/tslint/rules/use-default-type-parameter)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}