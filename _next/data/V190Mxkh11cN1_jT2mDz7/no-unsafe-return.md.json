{"pageProps":{"rule":"# `no-unsafe-return`\n\nDisallows returning any from a function.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nReturned `any` typed values are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase.\n\n## Rule Details\n\nThis rule disallows returning `any` or `any[]` from a function.\nThis rule also compares the return type to the function's declared/inferred return type to ensure you don't return an unsafe `any` in a generic position to a receiver that's expecting a specific type. For example, it will error if you return `Set<any>` from a function declared as returning `Set<string>`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\nfunction foo1() {\n  return 1 as any;\n}\nfunction foo2() {\n  return Object.create(null);\n}\nconst foo3 = () => {\n  return 1 as any;\n};\nconst foo4 = () => Object.create(null);\n\nfunction foo5() {\n  return [] as any[];\n}\nfunction foo6() {\n  return [] as Array<any>;\n}\nfunction foo7() {\n  return [] as readonly any[];\n}\nfunction foo8() {\n  return [] as Readonly<any[]>;\n}\nconst foo9 = () => {\n  return [] as any[];\n};\nconst foo10 = () => [] as any[];\n\nconst foo11 = (): string[] => [1, 2, 3] as any[];\n\n// generic position examples\nfunction assignability1(): Set<string> {\n  return new Set<any>([1]);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set<any>([true]);\n```\n\n### ✅ Correct\n\n```ts\nfunction foo1() {\n  return 1;\n}\nfunction foo2() {\n  return Object.create(null) as Record<string, unknown>;\n}\n\nconst foo3 = () => [];\nconst foo4 = () => ['a'];\n\nfunction assignability1(): Set<string> {\n  return new Set<string>(['foo']);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set(['foo']);\n```\n\n<!--/tabs-->\n\nThere are cases where the rule allows to return `any` to `unknown`.\n\nExamples of `any` to `unknown` return that are allowed.\n\n```ts\nfunction foo1(): unknown {\n  return JSON.parse(singleObjString); // Return type for JSON.parse is any.\n}\n\nfunction foo2(): unknown[] {\n  return [] as any[];\n}\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-return\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Related To\n\n- [`no-explicit-any`](./no-explicit-any.md)\n- TSLint: [`no-unsafe-any`](https://palantir.github.io/tslint/rules/no-unsafe-any/)\n\n## Attributes\n\n- [x] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}