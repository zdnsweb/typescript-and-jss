{"pageProps":{"rule":"# `array-type`\n\nRequires using either `T[]` or `Array<T>` for arrays.\n\nUsing the same style for array definitions across your codebase makes it easier for your developers to read and understand the types.\n\n## Rule Details\n\nThis rule aims to standardize usage of array types within your codebase.\n\n## Options\n\n```ts\ntype ArrayOption = 'array' | 'generic' | 'array-simple';\ntype Options = {\n  default: ArrayOption;\n  readonly?: ArrayOption;\n};\n\nconst defaultOptions: Options = {\n  default: 'array',\n};\n```\n\nThe rule accepts an options object with the following properties:\n\n- `default` - sets the array type expected for mutable cases.\n- `readonly` - sets the array type expected for readonly arrays. If this is omitted, then the value for `default` will be used.\n\nEach property can be set to one of three strings: `'array' | 'generic' | 'array-simple'`.\n\nThe default config will enforce that all mutable and readonly arrays use the `'array'` syntax.\n\n### `\"array\"`\n\nAlways use `T[]` or `readonly T[]` for all array types.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\n```\n\n#### ‚úÖ Correct\n\n```ts\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\n```\n\n### `\"generic\"`\n\nAlways use `Array<T>` or `ReadonlyArray<T>` for all array types.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\n```\n\n#### ‚úÖ Correct\n\n```ts\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\n```\n\n### `\"array-simple\"`\n\nUse `T[]` or `readonly T[]` for simple types (i.e. types which are just primitive names or type references).\nUse `Array<T>` or `ReadonlyArray<T>` for all other types (union types, intersection types, object types, function types, etc).\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nconst a: (string | number)[] = ['a', 'b'];\nconst b: { prop: string }[] = [{ prop: 'a' }];\nconst c: (() => void)[] = [() => {}];\nconst d: Array<MyType> = ['a', 'b'];\nconst e: Array<string> = ['a', 'b'];\nconst f: ReadonlyArray<string> = ['a', 'b'];\n```\n\n#### ‚úÖ Correct\n\n```ts\nconst a: Array<string | number> = ['a', 'b'];\nconst b: Array<{ prop: string }> = [{ prop: 'a' }];\nconst c: Array<() => void> = [() => {}];\nconst d: MyType[] = ['a', 'b'];\nconst e: string[] = ['a', 'b'];\nconst f: readonly string[] = ['a', 'b'];\n```\n\n## Combination Matrix\n\nThis matrix lists all possible option combinations and their expected results for different types of Arrays.\n\n| defaultOption  | readonlyOption | Array with simple type | Array with non simple type | Readonly array with simple type | Readonly array with non simple type |\n| -------------- | -------------- | ---------------------- | -------------------------- | ------------------------------- | ----------------------------------- |\n| `array`        |                | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array`        | `array`        | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array`        | `array-simple` | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array`        | `generic`      | `number[]`             | `(Foo & Bar)[]`            | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` |                | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` | `array`        | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array-simple` | `array-simple` | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` | `generic`      | `number[]`             | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      |                | `Array<number>`        | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      | `array`        | `Array<number>`        | `Array<Foo & Bar>`         | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `generic`      | `array-simple` | `Array<number>`        | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      | `generic`      | `Array<number>`        | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n\n## Related To\n\n- TSLint: [array-type](https://palantir.github.io/tslint/rules/array-type/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}