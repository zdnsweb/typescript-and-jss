{"pageProps":{"rule":"# `no-extraneous-class`\n\nForbids the use of classes as namespaces.\n\nThis rule warns when a class is accidentally used as a namespace.\n\n## Rule Details\n\nFrom TSLint‚Äôs docs:\n\n> Users who come from a Java-style OO language may wrap their utility functions in an extra class,\n> instead of putting them at the top level.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nclass EmptyClass {}\n\nclass ConstructorOnly {\n  constructor() {\n    foo();\n  }\n}\n\n// Use an object instead:\nclass StaticOnly {\n  static version = 42;\n  static hello() {\n    console.log('Hello, world!');\n  }\n}\n```\n\n### ‚úÖ Correct\n\n```ts\nclass EmptyClass extends SuperClass {}\n\nclass ParameterProperties {\n  constructor(public name: string) {}\n}\n\nconst StaticOnly = {\n  version: 42,\n  hello() {\n    console.log('Hello, world!');\n  },\n};\n```\n\n## Options\n\nThis rule accepts a single object option.\n\n```ts\ntype Options = {\n  // allow extraneous classes if they only contain a constructor\n  allowConstructorOnly?: boolean;\n  // allow extraneous classes if they have no body (i.e. are empty)\n  allowEmpty?: boolean;\n  // allow extraneous classes if they only contain static members\n  allowStaticOnly?: boolean;\n  // allow extraneous classes if they have a decorator\n  allowWithDecorator?: boolean;\n};\n\nconst defaultOptions: Options = {\n  allowConstructorOnly: false,\n  allowEmpty: false,\n  allowStaticOnly: false,\n  allowWithDecorator: false,\n};\n```\n\n## When Not To Use It\n\nYou can disable this rule if you don‚Äôt have anyone who would make these kinds of mistakes on your\nteam or if you use classes as namespaces.\n\n## Related To\n\n[`no-unnecessary-class`](https://palantir.github.io/tslint/rules/no-unnecessary-class/) from TSLint\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}