{"pageProps":{"rule":"# `prefer-for-of`\n\nPrefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated.\n\nThis rule recommends a for-of loop when the loop index is only used to read from an array that is being iterated.\n\n## Rule Details\n\nFor cases where the index is only used to read from the array being iterated, a for-of loop is easier to read and write.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```js\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n```\n\n### ✅ Correct\n\n```js\nfor (const x of arr) {\n  console.log(x);\n}\n\nfor (let i = 0; i < arr.length; i++) {\n  // i is used to write to arr, so for-of could not be used.\n  arr[i] = 0;\n}\n\nfor (let i = 0; i < arr.length; i++) {\n  // i is used independent of arr, so for-of could not be used.\n  console.log(i, arr[i]);\n}\n```\n\n## When Not To Use It\n\nIf you transpile for browsers that do not support for-of loops, you may wish to use traditional for loops that produce more compact code.\n\n## Related To\n\n- TSLint: ['prefer-for-of'](https://palantir.github.io/tslint/rules/prefer-for-of/)\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}