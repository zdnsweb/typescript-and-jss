{"pageProps":{"rule":"# `require-array-sort-compare`\n\nRequires `Array#sort` calls to always provide a `compareFunction`.\n\nThis rule prevents invoking the `Array#sort()` method without providing a `compare` argument.\n\nWhen called without a compare function, `Array#sort()` converts all non-undefined array elements into strings and then compares said strings based off their UTF-16 code units.\n\nThe result is that elements are sorted alphabetically, regardless of their type.\nWhen sorting numbers, this results in the classic \"10 before 2\" order:\n\n```ts\n[1, 2, 3, 10, 20, 30].sort(); //‚Üí [1, 10, 2, 20, 3, 30]\n```\n\nThis also means that `Array#sort` does not always sort consistently, as elements may have custom `#toString` implementations that are not deterministic; this trap is noted in the language specification thusly:\n\n:::note\nMethod calls performed by the `ToString` abstract operations in steps 5 and 7 have the potential to cause `SortCompare` to not behave as a consistent comparison function.\n\nhttps://www.ecma-international.org/ecma-262/9.0/#sec-sortcompare\n:::\n\n## Rule Details\n\nThis rule aims to ensure all calls of the native `Array#sort` method provide a `compareFunction`, while ignoring calls to user-defined `sort` methods.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nconst array: any[];\nconst stringArray: string[];\n\narray.sort();\n\n// String arrays should be sorted using `String#localeCompare`.\nstringArray.sort();\n```\n\n### ‚úÖ Correct\n\n```ts\nconst array: any[];\nconst userDefinedType: { sort(): void };\n\narray.sort((a, b) => a - b);\narray.sort((a, b) => a.localeCompare(b));\n\nuserDefinedType.sort();\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  /**\n   * If true, an array which all elements are string is ignored.\n   */\n  ignoreStringArrays?: boolean;\n};\n\nconst defaults = {\n  ignoreStringArrays: false,\n};\n```\n\n### `ignoreStringArrays`\n\nExamples of code for this rule with `{ ignoreStringArrays: true }`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nconst one = 1;\nconst two = 2;\nconst three = 3;\n[one, two, three].sort();\n```\n\n#### ‚úÖ Correct\n\n```ts\nconst one = '1';\nconst two = '2';\nconst three = '3';\n[one, two, three].sort();\n```\n\n## When Not To Use It\n\nIf you understand the language specification enough, you can turn this rule off safely.\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}