{"pageProps":{"rule":"# `prefer-reduce-type-parameter`\n\nPrefer using type parameter when calling `Array#reduce` instead of casting.\n\nIt's common to call `Array#reduce` with a generic type, such as an array or object, as the initial value.\nSince these values are empty, their types are not usable:\n\n- `[]` has type `never[]`, which can't have items pushed into it as nothing is type `never`\n- `{}` has type `{}`, which doesn't have an index signature and so can't have properties added to it\n\nA common solution to this problem is to cast the initial value. While this will work, it's not the most optimal\nsolution as casting has subtle effects on the underlying types that can allow bugs to slip in.\n\nA better (and lesser known) solution is to pass the type in as a generic parameter to `Array#reduce` explicitly.\nThis means that TypeScript doesn't have to try to infer the type, and avoids the common pitfalls that come with casting.\n\n## Rule Details\n\nThis rule looks for calls to `Array#reduce`, and warns if an initial value is being passed & casted,\nsuggesting instead to pass the cast type to `Array#reduce` as its generic parameter.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\n[1, 2, 3].reduce((arr, num) => arr.concat(num * 2), [] as number[]);\n\n['a', 'b'].reduce(\n  (accum, name) => ({\n    ...accum,\n    [name]: true,\n  }),\n  {} as Record<string, boolean>,\n);\n```\n\n### ✅ Correct\n\n```ts\n[1, 2, 3].reduce<number[]>((arr, num) => arr.concat(num * 2), []);\n\n['a', 'b'].reduce<Record<string, boolean>>(\n  (accum, name) => ({\n    ...accum,\n    [name]: true,\n  }),\n  {},\n);\n```\n\n## Options\n\nThere are no options.\n\n## When Not To Use It\n\nIf you don't want to use typechecking in your linting, you can't use this rule.\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [x] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}