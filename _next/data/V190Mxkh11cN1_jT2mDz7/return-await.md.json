{"pageProps":{"rule":"# `return-await`\n\nEnforces consistent returning of awaited values.\n\nReturning an awaited promise can make sense for better stack trace information as well as for consistent error handling (returned promises will not be caught in an async function try/catch).\n\n## Rule Details\n\nThis rule builds on top of the [`eslint/no-return-await`](https://eslint.org/docs/rules/no-return-await) rule.\nIt expands upon the base rule to add support for optionally requiring `return await` in certain cases.\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-return-await\": \"off\",\n  \"@typescript-eslint/return-await\": \"error\"\n}\n```\n\n## Options\n\n```ts\ntype Options = 'in-try-catch' | 'always' | 'never';\n\nconst defaultOptions: Options = 'in-try-catch';\n```\n\n### `in-try-catch`\n\nRequires that a returned promise must be `await`ed in `try-catch-finally` blocks, and disallows it elsewhere.\nSpecifically:\n\n- if you `return` a promise within a `try`, then it must be `await`ed.\n- if you `return` a promise within a `catch`, and there **_is no_** `finally`, then it **_must not_** be `await`ed.\n- if you `return` a promise within a `catch`, and there **_is a_** `finally`, then it **_must_** be `await`ed.\n- if you `return` a promise within a `finally`, then it **_must not_** be `await`ed.\n\nExamples of code with `in-try-catch`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nasync function invalidInTryCatch1() {\n  try {\n    return Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function invalidInTryCatch2() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return await Promise.resolve('catch');\n  }\n}\n\nasync function invalidInTryCatch3() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return Promise.resolve('catch');\n  } finally {\n    console.log('cleanup');\n  }\n}\n\nasync function invalidInTryCatch4() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    throw new Error('error2');\n  } finally {\n    return await Promise.resolve('finally');\n  }\n}\n\nasync function invalidInTryCatch5() {\n  return await Promise.resolve('try');\n}\n\nasync function invalidInTryCatch6() {\n  return await 'value';\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\nasync function validInTryCatch1() {\n  try {\n    return await Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function validInTryCatch2() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return Promise.resolve('catch');\n  }\n}\n\nasync function validInTryCatch3() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return await Promise.resolve('catch');\n  } finally {\n    console.log('cleanup');\n  }\n}\n\nasync function validInTryCatch4() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    throw new Error('error2');\n  } finally {\n    return Promise.resolve('finally');\n  }\n}\n\nasync function validInTryCatch5() {\n  return Promise.resolve('try');\n}\n\nasync function validInTryCatch6() {\n  return 'value';\n}\n```\n\n### `always`\n\nRequires that all returned promises are `await`ed.\n\nExamples of code with `always`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nasync function invalidAlways1() {\n  try {\n    return Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function invalidAlways2() {\n  return Promise.resolve('try');\n}\n\nasync function invalidAlways3() {\n  return await 'value';\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\nasync function validAlways1() {\n  try {\n    return await Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function validAlways2() {\n  return await Promise.resolve('try');\n}\n\nasync function validAlways3() {\n  return 'value';\n}\n```\n\n### `never`\n\nDisallows all `await`ing any returned promises.\n\nExamples of code with `never`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nasync function invalidNever1() {\n  try {\n    return await Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function invalidNever2() {\n  return await Promise.resolve('try');\n}\n\nasync function invalidNever3() {\n  return await 'value';\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\nasync function validNever1() {\n  try {\n    return Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function validNever2() {\n  return Promise.resolve('try');\n}\n\nasync function validNever3() {\n  return 'value';\n}\n```\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}