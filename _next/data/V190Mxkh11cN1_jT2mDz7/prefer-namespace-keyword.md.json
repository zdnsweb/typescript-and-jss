{"pageProps":{"rule":"# `prefer-namespace-keyword`\n\nRequire the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules.\n\nIn an effort to prevent further confusion between custom TypeScript modules and the new ES2015 modules, starting\nwith TypeScript `v1.5` the keyword `namespace` is now the preferred way to declare custom TypeScript modules.\n\n## Rule Details\n\nThis rule aims to standardize the way modules are declared.\n\n## When Not To Use It\n\nIf you are using the ES2015 module syntax, then you will not need this rule.\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/prefer-namespace-keyword\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Further Reading\n\n- [Modules](https://www.typescriptlang.org/docs/handbook/modules.html)\n- [Namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html)\n- [Namespaces and Modules](https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html)\n\n## Related To\n\n- TSLint: [no-internal-module](https://palantir.github.io/tslint/rules/no-internal-module/)\n\n## Attributes\n\n- [x] âœ… Recommended\n- [x] ðŸ”§ Fixable\n- [ ] ðŸ’­ Requires type information\n"},"__N_SSG":true}