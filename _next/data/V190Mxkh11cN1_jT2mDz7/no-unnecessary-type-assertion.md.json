{"pageProps":{"rule":"# `no-unnecessary-type-assertion`\n\nWarns if a type assertion does not change the type of an expression.\n\nThis rule prohibits using a type assertion that does not change the type of an expression.\n\n## Rule Details\n\nThis rule aims to prevent unnecessary type assertions.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nconst foo = 3;\nconst bar = foo!;\n```\n\n```ts\nconst foo = <3>3;\n```\n\n```ts\ntype Foo = 3;\nconst foo = <Foo>3;\n```\n\n```ts\ntype Foo = 3;\nconst foo = 3 as Foo;\n```\n\n```ts\nfunction foo(x: number): number {\n  return x!; // unnecessary non-null\n}\n```\n\n### ‚úÖ Correct\n\n```ts\nconst foo = <number>3;\n```\n\n```ts\nconst foo = 3 as number;\n```\n\n```ts\nconst foo = 'foo' as const;\n```\n\n```ts\nfunction foo(x: number | undefined): number {\n  return x!;\n}\n```\n\n## Options\n\nThis rule optionally takes an object with a single property `typesToIgnore`, which can be set to a list of type names to ignore.\n\nFor example, with `@typescript-eslint/no-unnecessary-type-assertion: [\"error\", { typesToIgnore: ['Foo'] }]`, the following is **correct** code\":\n\n```ts\ntype Foo = 3;\nconst foo: Foo = 3;\n```\n\n## When Not To Use It\n\nIf you don't care about having no-op type assertions in your code, then you can turn off this rule.\n\n## Related To\n\n- TSLint: [`no-unnecessary-type-assertion`](https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [x] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}