{"pageProps":{"rule":"# `no-unsafe-argument`\n\nDisallows calling a function with an any type value.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nCall a function with `any` typed argument are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase.\n\n## Rule Details\n\nThis rule disallows calling a function with `any` in its arguments, and it will disallow spreading `any[]`.\nThis rule also disallows spreading a tuple type with one of its elements typed as `any`.\nThis rule also compares the argument's type to the variable's type to ensure you don't pass an unsafe `any` in a generic position to a receiver that's expecting a specific type. For example, it will error if you assign `Set<any>` to an argument declared as `Set<string>`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nconst anyTyped = 1 as any;\n\nfoo(...anyTyped);\nfoo(anyTyped, 1, 'a');\n\nconst anyArray: any[] = [];\nfoo(...anyArray);\n\nconst tuple1 = ['a', anyTyped, 'b'] as const;\nfoo(...tuple1);\n\nconst tuple2 = [1] as const;\nfoo('a', ...tuple, anyTyped);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst x = [1, 2] as [number, ...number[]];\nfoo('a', ...x, anyTyped);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<any>(), new Map<any, string>());\n```\n\n### ‚úÖ Correct\n\n```ts\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nfoo('a', 1, 'b');\n\nconst tuple1 = ['a', 1, 'b'] as const;\nfoo(...tuple1);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst array: string[] = ['a'];\nbar('a', 1, ...array);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<string>(), new Map<string, string>());\n```\n\n<!--/tabs-->\n\nThere are cases where the rule allows passing an argument of `any` to `unknown`.\n\nExample of `any` to `unknown` assignment that are allowed.\n\n```ts\ndeclare function foo(arg1: unknown, arg2: Set<unkown>, arg3: unknown[]): void;\nfoo(1 as any, new Set<any>(), [] as any[]);\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-argument\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Related To\n\n- [`no-explicit-any`](./no-explicit-any.md)\n- TSLint: [`no-unsafe-any`](https://palantir.github.io/tslint/rules/no-unsafe-any/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}