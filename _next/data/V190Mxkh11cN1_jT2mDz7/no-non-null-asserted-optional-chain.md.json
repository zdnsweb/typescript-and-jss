{"pageProps":{"rule":"# `no-non-null-asserted-optional-chain`\n\nDisallows using a non-null assertion after an optional chain expression.\n\n## Rule Details\n\nOptional chain expressions are designed to return `undefined` if the optional property is nullish.\nUsing non-null assertions after an optional chain expression is wrong, and introduces a serious type safety hole into your code.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n/* eslint @typescript-eslint/no-non-null-asserted-optional-chain: \"error\" */\n\nfoo?.bar!;\nfoo?.bar()!;\n\n// Prior to TS3.9, foo?.bar!.baz meant (foo?.bar).baz - i.e. the non-null assertion is applied to the entire chain so far.\n// For TS3.9 and greater, the non-null assertion is only applied to the property itself, so it's safe.\n// The following is incorrect code if you're using less than TS3.9\nfoo?.bar!.baz;\nfoo?.bar!();\nfoo?.bar!().baz;\n```\n\n### ‚úÖ Correct\n\n```ts\n/* eslint @typescript-eslint/no-non-null-asserted-optional-chain: \"error\" */\n\nfoo?.bar;\n(foo?.bar).baz;\nfoo?.bar();\nfoo?.bar();\nfoo?.bar().baz;\n\n// The following is correct code if you're using TS3.9 or greater\nfoo?.bar!.baz;\nfoo?.bar!();\nfoo?.bar!().baz;\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-non-null-asserted-optional-chain\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## When Not To Use It\n\nIf you are not using TypeScript 3.7 (or greater), then you will not need to use this rule, as the operator is not supported.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Optional Chaining Proposal](https://github.com/tc39/proposal-optional-chaining/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}