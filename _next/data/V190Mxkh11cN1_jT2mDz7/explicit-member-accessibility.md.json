{"pageProps":{"rule":"# `explicit-member-accessibility`\n\nRequire explicit accessibility modifiers on class properties and methods.\n\nLeaving off accessibility modifier and making everything public can make\nyour interface hard to use by others.\nIf you make all internal pieces private or protected, your interface will\nbe easier to use.\n\n## Rule Details\n\nThis rule aims to make code more readable and explicit about who can use\nwhich properties.\n\n## Options\n\n```ts\ntype AccessibilityLevel =\n  | 'explicit' // require an accessor (including public)\n  | 'no-public' // don't require public\n  | 'off'; // don't check\n\ntype Options = {\n  accessibility?: AccessibilityLevel;\n  ignoredMethodNames?: string[];\n  overrides?: {\n    accessors?: AccessibilityLevel;\n    constructors?: AccessibilityLevel;\n    methods?: AccessibilityLevel;\n    properties?: AccessibilityLevel;\n    parameterProperties?: AccessibilityLevel;\n  };\n};\n\nconst defaultOptions: Options = {\n  accessibility: 'explicit',\n};\n```\n\n### Configuring in a mixed JS/TS codebase\n\nIf you are working on a codebase within which you lint non-TypeScript code (i.e. `.js`/`.jsx`), you should ensure that you should use [ESLint `overrides`](https://eslint.org/docs/user-guide/configuring#disabling-rules-only-for-a-group-of-files) to only enable the rule on `.ts`/`.tsx` files. If you don't, then you will get unfixable lint errors reported within `.js`/`.jsx` files.\n\n```jsonc\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-member-accessibility\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-member-accessibility\": [\"error\"]\n      }\n    }\n  ]\n}\n```\n\n### `accessibility`\n\nThis rule in its default state requires no configuration and will enforce that every class member has an accessibility modifier. If you would like to allow for some implicit public members then you have the following options:\n\n```ts\n{\n  accessibility: 'explicit',\n  overrides: {\n    accessors: 'explicit',\n    constructors: 'no-public',\n    methods: 'explicit',\n    properties: 'off',\n    parameterProperties: 'explicit'\n  }\n}\n```\n\nNote the above is an example of a possible configuration you could use - it is not the default configuration.\n\nThe following patterns are considered incorrect code if no options are provided:\n\n```ts\nclass Animal {\n  constructor(name) {\n    // No accessibility modifier\n    this.animalName = name;\n  }\n  animalName: string; // No accessibility modifier\n  get name(): string {\n    // No accessibility modifier\n    return this.animalName;\n  }\n  set name(value: string) {\n    // No accessibility modifier\n    this.animalName = value;\n  }\n  walk() {\n    // method\n  }\n}\n```\n\nThe following patterns are considered correct with the default options `{ accessibility: 'explicit' }`:\n\n```ts\nclass Animal {\n  public constructor(public breed, name) {\n    // Parameter property and constructor\n    this.animalName = name;\n  }\n  private animalName: string; // Property\n  get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  public walk() {\n    // method\n  }\n}\n```\n\nThe following patterns are considered incorrect with the accessibility set to **no-public** `[{ accessibility: 'no-public' }]`:\n\n```ts\nclass Animal {\n  public constructor(public breed, name) {\n    // Parameter property and constructor\n    this.animalName = name;\n  }\n  public animalName: string; // Property\n  public get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  public set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  public walk() {\n    // method\n  }\n}\n```\n\nThe following patterns are considered correct with the accessibility set to **no-public** `[{ accessibility: 'no-public' }]`:\n\n```ts\nclass Animal {\n  constructor(protected breed, name) {\n    // Parameter property and constructor\n    this.name = name;\n  }\n  private animalName: string; // Property\n  get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  private set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  protected walk() {\n    // method\n  }\n}\n```\n\n### Overrides\n\nThere are three ways in which an override can be used.\n\n- To disallow the use of public on a given member.\n- To enforce explicit member accessibility when the root has allowed implicit public accessibility\n- To disable any checks on given member type\n\n#### Disallow the use of public on a given member\n\ne.g. `[ { overrides: { constructors: 'no-public' } } ]`\n\nThe following patterns are considered incorrect with the example override\n\n```ts\nclass Animal {\n  public constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n}\n```\n\nThe following patterns are considered correct with the example override\n\n```ts\nclass Animal {\n  constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n}\n```\n\n#### Require explicit accessibility for a given member\n\ne.g. `[ { accessibility: 'no-public', overrides: { properties: 'explicit' } } ]`\n\nThe following patterns are considered incorrect with the example override\n\n```ts\nclass Animal {\n  constructor(protected animalName) {}\n  get name() {\n    return this.animalName;\n  }\n  protected set name(value: string) {\n    this.animalName = value;\n  }\n  legs: number;\n  private hasFleas: boolean;\n}\n```\n\nThe following patterns are considered correct with the example override\n\n```ts\nclass Animal {\n  constructor(protected animalName) {}\n  get name() {\n    return this.animalName;\n  }\n  protected set name(value: string) {\n    this.animalName = value;\n  }\n  public legs: number;\n  private hasFleas: boolean;\n}\n```\n\ne.g. `[ { accessibility: 'off', overrides: { parameterProperties: 'explicit' } } ]`\n\nThe following code is considered incorrect with the example override\n\n```ts\nclass Animal {\n  constructor(readonly animalName: string) {}\n}\n```\n\nThe following code patterns are considered correct with the example override\n\n```ts\nclass Animal {\n  constructor(public readonly animalName: string) {}\n}\n\nclass Animal {\n  constructor(public animalName: string) {}\n}\n\nclass Animal {\n  constructor(animalName: string) {}\n}\n```\n\ne.g. `[ { accessibility: 'off', overrides: { parameterProperties: 'no-public' } } ]`\n\nThe following code is considered incorrect with the example override\n\n```ts\nclass Animal {\n  constructor(public readonly animalName: string) {}\n}\n```\n\nThe following code is considered correct with the example override\n\n```ts\nclass Animal {\n  constructor(public animalName: string) {}\n}\n```\n\n#### Disable any checks on given member type\n\ne.g. `[{ overrides: { accessors : 'off' } } ]`\n\nAs no checks on the overridden member type are performed all permutations of visibility are permitted for that member type\n\nThe follow pattern is considered incorrect for the given configuration\n\n```ts\nclass Animal {\n  constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n  get legs() {\n    return this.legCount;\n  }\n}\n```\n\nThe following patterns are considered correct with the example override\n\n```ts\nclass Animal {\n  public constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n  get legs() {\n    return this.legCount;\n  }\n}\n```\n\n### Except specific methods\n\nIf you want to ignore some specific methods, you can do it by specifying method names. Note that this option does not care for the context, and will ignore every method with these names, which could lead to it missing some cases. You should use this sparingly.\ne.g. `[ { ignoredMethodNames: ['specificMethod', 'whateverMethod'] } ]`\n\n```ts\nclass Animal {\n  get specificMethod() {\n    console.log('No error because you specified this method on option');\n  }\n  get whateverMethod() {\n    console.log('No error because you specified this method on option');\n  }\n  public get otherMethod() {\n    console.log('This method comply with this rule');\n  }\n}\n```\n\n## When Not To Use It\n\nIf you think defaulting to public is a good default, then you should consider using the `no-public` setting. If you want to mix implicit and explicit public members then disable this rule.\n\n## Further Reading\n\n- TypeScript [Accessibility Modifiers](https://www.typescriptlang.org/docs/handbook/classes.html#public-private-and-protected-modifiers)\n\n## Related To\n\n- TSLint: [member-access](http://palantir.github.io/tslint/rules/member-access/)\n\n## Attributes\n\n- [ ] âœ… Recommended\n- [x] ðŸ”§ Fixable\n- [ ] ðŸ’­ Requires type information\n"},"__N_SSG":true}