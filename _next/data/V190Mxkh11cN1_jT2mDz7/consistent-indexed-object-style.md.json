{"pageProps":{"rule":"# `consistent-indexed-object-style`\n\nEnforce or disallow the use of the record type.\n\nTypeScript supports defining object show keys can be flexible using an index signature. TypeScript also has a builtin type named `Record` to create an empty object defining only an index signature. For example, the following types are equal:\n\n```ts\ninterface Foo {\n  [key: string]: unknown;\n}\n\ntype Foo = {\n  [key: string]: unknown;\n};\n\ntype Foo = Record<string, unknown>;\n```\n\n## Options\n\n- `\"record\"`: Set to `\"record\"` to only allow the `Record` type. Set to `\"index-signature\"` to only allow index signatures. (Defaults to `\"record\"`)\n\nFor example:\n\n```json\n{\n  \"@typescript-eslint/consistent-indexed-object-style\": [\n    \"error\",\n    \"index-signature\"\n  ]\n}\n```\n\n## Rule Details\n\nThis rule enforces a consistent way to define records.\n\n### `record`\n\nExamples of code with `record` option.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ninterface Foo {\n  [key: string]: unknown;\n}\n\ntype Foo = {\n  [key: string]: unknown;\n};\n```\n\n#### ‚úÖ Correct\n\n```ts\ntype Foo = Record<string, unknown>;\n```\n\n### `index-signature`\n\nExamples of code with `index-signature` option.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ntype Foo = Record<string, unknown>;\n```\n\n#### ‚úÖ Correct\n\n```ts\ninterface Foo {\n  [key: string]: unknown;\n}\n\ntype Foo = {\n  [key: string]: unknown;\n};\n```\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}