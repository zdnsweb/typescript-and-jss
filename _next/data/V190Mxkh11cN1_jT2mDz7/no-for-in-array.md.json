{"pageProps":{"rule":"# `no-for-in-array`\n\nDisallow iterating over an array with a for-in loop.\n\nThis rule prohibits iterating over an array with a for-in loop.\n\n## Rule Details\n\nRationale from TSLint:\n\nA for-in loop (`for (var k in o)`) iterates over the properties of an Object.\nWhile it is legal to use for-in loops with array types, it is not common.\nfor-in will iterate over the indices of the array as strings, omitting any \"holes\" in\nthe array.\nMore common is to use for-of, which iterates over the values of an array.\nIf you want to iterate over the indices, alternatives include:\n\n```js\narray.forEach((value, index) => { ... });\nfor (const [index, value] of array.entries()) { ... }\nfor (let i = 0; i < array.length; i++) { ... }\n```\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```js\nfor (const x in [3, 4, 5]) {\n  console.log(x);\n}\n```\n\n### ‚úÖ Correct\n\n```js\nfor (const x in { a: 3, b: 4, c: 5 }) {\n  console.log(x);\n}\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-for-in-array\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## When Not To Use It\n\nIf you want to iterate through a loop using the indices in an array as strings, you can turn off this rule.\n\n## Related To\n\n- TSLint: ['no-for-in-array'](https://palantir.github.io/tslint/rules/no-for-in-array/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}