{"pageProps":{"rule":"# `no-magic-numbers`\n\nDisallow magic numbers.\n\n## Rule Details\n\nThis rule extends the base [`eslint/no-magic-numbers`](https://eslint.org/docs/rules/no-magic-numbers) rule.\nIt adds support for:\n\n- numeric literal types (`type T = 1`),\n- `enum` members (`enum Foo { bar = 1 }`),\n- `readonly` class properties (`class Foo { readonly bar = 1 }`).\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-magic-numbers\": \"off\",\n  \"@typescript-eslint/no-magic-numbers\": [\n    \"error\",\n    {\n      /* options */\n    }\n  ]\n}\n```\n\n## Options\n\nSee [`eslint/no-magic-numbers` options](https://eslint.org/docs/rules/no-magic-numbers#options).\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoMagicNumbersOptions {\n  ignoreEnums?: boolean;\n  ignoreNumericLiteralTypes?: boolean;\n  ignoreReadonlyClassProperties?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoMagicNumbersDefaultOptions,\n  ignoreEnums: false,\n  ignoreNumericLiteralTypes: false,\n  ignoreReadonlyClassProperties: false,\n};\n```\n\n### `ignoreEnums`\n\nA boolean to specify if enums used in TypeScript are considered okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreEnums\": false }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreEnums\": false }]*/\n\nenum foo {\n  SECOND = 1000,\n}\n```\n\nExamples of **correct** code for the `{ \"ignoreEnums\": true }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreEnums\": true }]*/\n\nenum foo {\n  SECOND = 1000,\n}\n```\n\n### `ignoreNumericLiteralTypes`\n\nA boolean to specify if numbers used in TypeScript numeric literal types are considered okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreNumericLiteralTypes\": false }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreNumericLiteralTypes\": false }]*/\n\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n```\n\nExamples of **correct** code for the `{ \"ignoreNumericLiteralTypes\": true }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreNumericLiteralTypes\": true }]*/\n\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n```\n\n### `ignoreReadonlyClassProperties`\n\nExamples of **incorrect** code for the `{ \"ignoreReadonlyClassProperties\": false }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreReadonlyClassProperties\": false }]*/\n\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n```\n\nExamples of **correct** code for the `{ \"ignoreReadonlyClassProperties\": true }` option:\n\n```ts\n/*eslint @typescript-eslint/no-magic-numbers: [\"error\", { \"ignoreReadonlyClassProperties\": true }]*/\n\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n```\n\n<sup>\n\nTaken with ‚ù§Ô∏è [from ESLint core](https://github.com/eslint/eslint/blob/main/docs/rules/no-magic-numbers.md)\n\n</sup>\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}