{"pageProps":{"rule":"# `explicit-module-boundary-types`\n\nRequire explicit return and argument types on exported functions' and classes' public class methods.\n\nExplicit types for function return values and arguments makes it clear to any calling code what is the module boundary's input and output.\n\n## Rule Details\n\nThis rule aims to ensure that the values returned from a module are of the expected type.\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\n// Should indicate that no value is returned (void)\nexport function test() {\n  return;\n}\n\n// Should indicate that a number is returned\nexport default function () {\n  return 1;\n}\n\n// Should indicate that a string is returned\nexport var arrowFn = () => 'test';\n\n// All arguments should be typed\nexport var arrowFn = (arg): string => `test ${arg}`;\nexport var arrowFn = (arg: any): string => `test ${arg}`;\n\nexport class Test {\n  // Should indicate that no value is returned (void)\n  method() {\n    return;\n  }\n}\n```\n\n### ✅ Correct\n\n```ts\n// Function is not exported\nfunction test() {\n  return;\n}\n\n// A return value of type number\nexport var fn = function (): number {\n  return 1;\n};\n\n// A return value of type string\nexport var arrowFn = (arg: string): string => `test ${arg}`;\n\n// All arguments should be typed\nexport var arrowFn = (arg: string): string => `test ${arg}`;\nexport var arrowFn = (arg: unknown): string => `test ${arg}`;\n\n// Class is not exported\nclass Test {\n  method() {\n    return;\n  }\n}\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  /**\n   * If true, the rule will not report for arguments that are explicitly typed as `any`\n   */\n  allowArgumentsExplicitlyTypedAsAny?: boolean;\n  /**\n   * If true, body-less arrow functions that return an `as const` type assertion will not\n   * require an explicit return value annotation.\n   * You must still type the parameters of the function.\n   */\n  allowDirectConstAssertionInArrowFunctions?: boolean;\n  /**\n   * An array of function/method names that will not have their arguments or their return values checked.\n   */\n  allowedNames?: string[];\n  /**\n   * If true, functions immediately returning another function expression will not\n   * require an explicit return value annotation.\n   * You must still type the parameters of the function.\n   */\n  allowHigherOrderFunctions?: boolean;\n  /**\n   * If true, type annotations are also allowed on the variable of a function expression\n   * rather than on the function arguments/return value directly.\n   */\n  allowTypedFunctionExpressions?: boolean;\n};\n\nconst defaults = {\n  allowArgumentsExplicitlyTypedAsAny: false,\n  allowDirectConstAssertionInArrowFunctions: true,\n  allowedNames: [],\n  allowHigherOrderFunctions: true,\n  allowTypedFunctionExpressions: true,\n};\n```\n\n### Configuring in a mixed JS/TS codebase\n\nIf you are working on a codebase within which you lint non-TypeScript code (i.e. `.js`/`.jsx`), you should ensure that you should use [ESLint `overrides`](https://eslint.org/docs/user-guide/configuring#disabling-rules-only-for-a-group-of-files) to only enable the rule on `.ts`/`.tsx` files. If you don't, then you will get unfixable lint errors reported within `.js`/`.jsx` files.\n\n```jsonc\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-module-boundary-types\": [\"error\"]\n      }\n    }\n  ]\n}\n```\n\n### `allowArgumentsExplicitlyTypedAsAny`\n\nExamples of code for this rule with `{ allowArgumentsExplicitlyTypedAsAny: false }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nexport const func = (value: any): number => value + 1;\n```\n\n#### ✅ Correct\n\n```ts\nexport const func = (value: number): number => value + 1;\n```\n\n### `allowDirectConstAssertionInArrowFunctions`\n\nExamples of code for this rule with `{ allowDirectConstAssertionInArrowFunctions: false }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nexport const func = (value: number) => ({ type: 'X', value });\nexport const foo = () =>\n  ({\n    bar: true,\n  } as const);\nexport const bar = () => 1;\n```\n\n#### ✅ Correct\n\n```ts\nexport const func = (value: number) => ({ type: 'X', value } as const);\nexport const foo = () =>\n  ({\n    bar: true,\n  } as const);\nexport const bar = () => 1 as const;\n```\n\n### `allowedNames`\n\nYou may pass function/method names you would like this rule to ignore, like so:\n\n```json\n{\n  \"@typescript-eslint/explicit-module-boundary-types\": [\n    \"error\",\n    {\n      \"allowedNames\": [\"ignoredFunctionName\", \"ignoredMethodName\"]\n    }\n  ]\n}\n```\n\n### `allowHigherOrderFunctions`\n\nExamples of code for this rule with `{ allowHigherOrderFunctions: false }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nexport const arrowFn = () => () => {};\n\nexport function fn() {\n  return function () {};\n}\n\nexport function foo(outer: string) {\n  return function (inner: string) {};\n}\n```\n\n#### ✅ Correct\n\n```ts\nexport const arrowFn = () => (): void => {};\n\nexport function fn() {\n  return function (): void {};\n}\n\nexport function foo(outer: string) {\n  return function (inner: string): void {};\n}\n```\n\n### `allowTypedFunctionExpressions`\n\nExamples of code for this rule with `{ allowTypedFunctionExpressions: false }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nexport let arrowFn = () => 'test';\n\nexport let funcExpr = function () {\n  return 'test';\n};\n\nexport let objectProp = {\n  foo: () => 1,\n};\n\nexport const foo = bar => {};\n```\n\n#### ✅ Correct\n\n```ts\ntype FuncType = () => string;\n\nexport let arrowFn: FuncType = () => 'test';\n\nexport let funcExpr: FuncType = function () {\n  return 'test';\n};\n\nexport let asTyped = (() => '') as () => string;\nexport let castTyped = <() => string>(() => '');\n\ninterface ObjectType {\n  foo(): number;\n}\nexport let objectProp: ObjectType = {\n  foo: () => 1,\n};\nexport let objectPropAs = {\n  foo: () => 1,\n} as ObjectType;\nexport let objectPropCast = <ObjectType>{\n  foo: () => 1,\n};\n\ntype FooType = (bar: string) => void;\nexport const foo: FooType = bar => {};\n```\n\n## When Not To Use It\n\nIf you wish to make sure all functions have explicit return types, as opposed to only the module boundaries, you can use [explicit-function-return-type](./explicit-function-return-type.md)\n\n## Further Reading\n\n- TypeScript [Functions](https://www.typescriptlang.org/docs/handbook/functions.html#function-types)\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}