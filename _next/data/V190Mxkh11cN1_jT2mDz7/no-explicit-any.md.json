{"pageProps":{"rule":"# `no-explicit-any`\n\nDisallow usage of the `any` type.\n\nUsing the `any` type defeats the purpose of using TypeScript.\nWhen `any` is used, all compiler type checks around that value are ignored.\n\n## Rule Details\n\nThis rule doesn't allow `any` types to be defined.\nIt aims to keep TypeScript maximally useful.\nTypeScript has a compiler flag for `--noImplicitAny` that will prevent\nan `any` type from being implied by the compiler, but doesn't prevent\n`any` from being explicitly used.\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nconst age: any = 'seventeen';\n```\n\n```ts\nconst ages: any[] = ['seventeen'];\n```\n\n```ts\nconst ages: Array<any> = ['seventeen'];\n```\n\n```ts\nfunction greet(): any {}\n```\n\n```ts\nfunction greet(): any[] {}\n```\n\n```ts\nfunction greet(): Array<any> {}\n```\n\n```ts\nfunction greet(): Array<Array<any>> {}\n```\n\n```ts\nfunction greet(param: Array<any>): string {}\n```\n\n```ts\nfunction greet(param: Array<any>): Array<any> {}\n```\n\n### ‚úÖ Correct\n\n```ts\nconst age: number = 17;\n```\n\n```ts\nconst ages: number[] = [17];\n```\n\n```ts\nconst ages: Array<number> = [17];\n```\n\n```ts\nfunction greet(): string {}\n```\n\n```ts\nfunction greet(): string[] {}\n```\n\n```ts\nfunction greet(): Array<string> {}\n```\n\n```ts\nfunction greet(): Array<Array<string>> {}\n```\n\n```ts\nfunction greet(param: Array<string>): string {}\n```\n\n```ts\nfunction greet(param: Array<string>): Array<string> {}\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  // if true, auto-fixing will be made available in which the \"any\" type is converted to an \"unknown\" type\n  fixToUnknown: boolean;\n  // specify if arrays from the rest operator are considered okay\n  ignoreRestArgs: boolean;\n};\n\nconst defaults = {\n  fixToUnknown: false,\n  ignoreRestArgs: false,\n};\n```\n\n### `ignoreRestArgs`\n\nA boolean to specify if arrays from the rest operator are considered okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreRestArgs\": false }` option:\n\n```ts\n/*eslint @typescript-eslint/no-explicit-any: [\"error\", { \"ignoreRestArgs\": false }]*/\n\nfunction foo1(...args: any[]): void {}\nfunction foo2(...args: readonly any[]): void {}\nfunction foo3(...args: Array<any>): void {}\nfunction foo4(...args: ReadonlyArray<any>): void {}\n\ndeclare function bar(...args: any[]): void;\n\nconst baz = (...args: any[]) => {};\nconst qux = function (...args: any[]) {};\n\ntype Quux = (...args: any[]) => void;\ntype Quuz = new (...args: any[]) => void;\n\ninterface Grault {\n  (...args: any[]): void;\n}\ninterface Corge {\n  new (...args: any[]): void;\n}\ninterface Garply {\n  f(...args: any[]): void;\n}\n```\n\nExamples of **correct** code for the `{ \"ignoreRestArgs\": true }` option:\n\n```ts\n/*eslint @typescript-eslint/no-explicit-any: [\"error\", { \"ignoreRestArgs\": true }]*/\n\nfunction foo1(...args: any[]): void {}\nfunction foo2(...args: readonly any[]): void {}\nfunction foo3(...args: Array<any>): void {}\nfunction foo4(...args: ReadonlyArray<any>): void {}\n\ndeclare function bar(...args: any[]): void;\n\nconst baz = (...args: any[]) => {};\nconst qux = function (...args: any[]) {};\n\ntype Quux = (...args: any[]) => void;\ntype Quuz = new (...args: any[]) => void;\n\ninterface Grault {\n  (...args: any[]): void;\n}\ninterface Corge {\n  new (...args: any[]): void;\n}\ninterface Garply {\n  f(...args: any[]): void;\n}\n```\n\n## When Not To Use It\n\nIf an unknown type or a library without typings is used\nand you want to be able to specify `any`.\n\n## Further Reading\n\n- TypeScript [any type](https://www.typescriptlang.org/docs/handbook/basic-types.html#any)\n\n## Related To\n\n- TSLint: [no-any](https://palantir.github.io/tslint/rules/no-any/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}