{"pageProps":{"rule":"# `no-unsafe-call`\n\nDisallows calling an any type value.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nThe arguments to, and return value of calling an `any` typed variable are not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase.\n\n## Rule Details\n\nThis rule disallows calling any variable that is typed as `any`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar();\nanyVar.a.b();\n\nnestedAny.prop();\nnestedAny.prop['a']();\n\nnew anyVar();\nnew nestedAny.prop();\n\nanyVar`foo`;\nnestedAny.prop`foo`;\n```\n\n### ✅ Correct\n\n```ts\ndeclare const typedVar: () => void;\ndeclare const typedNested: { prop: { a: () => void } };\n\ntypedVar();\ntypedNested.prop.a();\n\n(() => {})();\n\nnew Map();\n\nString.raw`foo`;\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-call\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Related To\n\n- [`no-explicit-any`](./no-explicit-any.md)\n- TSLint: [`no-unsafe-any`](https://palantir.github.io/tslint/rules/no-unsafe-any/)\n\n## Attributes\n\n- [x] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}