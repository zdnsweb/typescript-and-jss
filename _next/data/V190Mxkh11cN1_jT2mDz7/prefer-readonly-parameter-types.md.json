{"pageProps":{"rule":"# `prefer-readonly-parameter-types`\n\nRequires that function parameters are typed as readonly to prevent accidental mutation of inputs.\n\nMutating function arguments can lead to confusing, hard to debug behavior.\nWhilst it's easy to implicitly remember to not modify function arguments, explicitly typing arguments as readonly provides clear contract to consumers.\nThis contract makes it easier for a consumer to reason about if a function has side-effects.\n\n## Rule Details\n\nThis rule allows you to enforce that function parameters resolve to readonly types.\nA type is considered readonly if:\n\n- it is a primitive type (`string`, `number`, `boolean`, `symbol`, or an enum),\n- it is a function signature type,\n- it is a readonly array type whose element type is considered readonly.\n- it is a readonly tuple type whose elements are all considered readonly.\n- it is an object type whose properties are all marked as readonly, and whose values are all considered readonly.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nfunction array1(arg: string[]) {} // array is not readonly\nfunction array2(arg: readonly string[][]) {} // array element is not readonly\nfunction array3(arg: [string, number]) {} // tuple is not readonly\nfunction array4(arg: readonly [string[], number]) {} // tuple element is not readonly\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { prop: string }) {} // property is not readonly\nfunction object2(arg: { readonly prop: string; prop2: string }) {} // not all properties are readonly\nfunction object3(arg: { readonly prop: { prop2: string } }) {} // nested property is not readonly\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  prop: string; // note: this property is mutable\n}\nfunction custom1(arg: CustomArrayType) {}\n\ninterface CustomFunction {\n  (): void;\n  prop: string; // note: this property is mutable\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: string[] | ReadonlyArray<number[]>) {} // not all types are readonly\n\n// rule also checks function types\ninterface Foo {\n  (arg: string[]): void;\n}\ninterface Foo {\n  new (arg: string[]): void;\n}\nconst x = { foo(arg: string[]): void; };\nfunction foo(arg: string[]);\ntype Foo = (arg: string[]) => void;\ninterface Foo {\n  foo(arg: string[]): void;\n}\n```\n\n### ‚úÖ Correct\n\n```ts\nfunction array1(arg: readonly string[]) {}\nfunction array2(arg: readonly (readonly string[])[]) {}\nfunction array3(arg: readonly [string, number]) {}\nfunction array4(arg: readonly [readonly string[], number]) {}\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { readonly prop: string }) {}\nfunction object2(arg: { readonly prop: string; readonly prop2: string }) {}\nfunction object3(arg: { readonly prop: { readonly prop2: string } }) {}\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  readonly prop: string;\n}\nfunction custom1(arg: Readonly<CustomArrayType>) {}\n// interfaces that extend the array types are not considered arrays, and thus must be made readonly.\n\ninterface CustomFunction {\n  (): void;\n  readonly prop: string;\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: readonly string[] | ReadonlyArray<number[]>) {}\n\nfunction primitive1(arg: string) {}\nfunction primitive2(arg: number) {}\nfunction primitive3(arg: boolean) {}\nfunction primitive4(arg: unknown) {}\nfunction primitive5(arg: null) {}\nfunction primitive6(arg: undefined) {}\nfunction primitive7(arg: any) {}\nfunction primitive8(arg: never) {}\nfunction primitive9(arg: string | number | undefined) {}\n\nfunction fnSig(arg: () => void) {}\n\nenum Foo { a, b }\nfunction enum(arg: Foo) {}\n\nfunction symb1(arg: symbol) {}\nconst customSymbol = Symbol('a');\nfunction symb2(arg: typeof customSymbol) {}\n\n// function types\ninterface Foo {\n  (arg: readonly string[]): void;\n}\ninterface Foo {\n  new (arg: readonly string[]): void;\n}\nconst x = { foo(arg: readonly string[]): void; };\nfunction foo(arg: readonly string[]);\ntype Foo = (arg: readonly string[]) => void;\ninterface Foo {\n  foo(arg: readonly string[]): void;\n}\n```\n\n## Options\n\n```ts\ninterface Options {\n  checkParameterProperties?: boolean;\n  ignoreInferredTypes?: boolean;\n}\n\nconst defaultOptions: Options = {\n  checkParameterProperties: true,\n  ignoreInferredTypes: false,\n  treatMethodsAsReadonly: false,\n};\n```\n\n### `checkParameterProperties`\n\nThis option allows you to enable or disable the checking of parameter properties.\nBecause parameter properties create properties on the class, it may be undesirable to force them to be readonly.\n\nExamples of code for this rule with `{checkParameterProperties: true}`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nclass Foo {\n  constructor(private paramProp: string[]) {}\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\nclass Foo {\n  constructor(private paramProp: readonly string[]) {}\n}\n```\n\n<!--/tabs-->\n\nExamples of **correct** code for this rule with `{checkParameterProperties: false}`:\n\n```ts\nclass Foo {\n  constructor(\n    private paramProp1: string[],\n    private paramProp2: readonly string[],\n  ) {}\n}\n```\n\n### `ignoreInferredTypes`\n\nThis option allows you to ignore parameters which don't explicitly specify a type. This may be desirable in cases where an external dependency specifies a callback with mutable parameters, and manually annotating the callback's parameters is undesirable.\n\nExamples of code for this rule with `{ignoreInferredTypes: true}`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nimport { acceptsCallback, CallbackOptions } from 'external-dependency';\n\nacceceptsCallback((options: CallbackOptions) => {});\n```\n\n<details>\n<summary>external-dependency.d.ts</summary>\n\n```ts\nexport interface CallbackOptions {\n  prop: string;\n}\ntype Callback = (options: CallbackOptions) => void;\ntype AcceptsCallback = (callback: Callback) => void;\n\nexport const acceptsCallback: AcceptsCallback;\n```\n\n</details>\n\n#### ‚úÖ Correct\n\n```ts\nimport { acceptsCallback } from 'external-dependency';\n\nacceceptsCallback(options => {});\n```\n\n<details>\n<summary>external-dependency.d.ts</summary>\n\n```ts\nexport interface CallbackOptions {\n  prop: string;\n}\ntype Callback = (options: CallbackOptions) => void;\ntype AcceptsCallback = (callback: Callback) => void;\n\nexport const acceptsCallback: AcceptsCallback;\n```\n\n</details>\n\n### `treatMethodsAsReadonly`\n\nThis option allows you to treat all mutable methods as though they were readonly. This may be desirable in when you are never reassigning methods.\n\nExamples of code for this rule with `{treatMethodsAsReadonly: false}`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ntype MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n```\n\n#### ‚úÖ Correct\n\n```ts\ntype MyType = Readonly<{\n  prop: string;\n  method(): string;\n}>;\nfunction foo(arg: MyType) {}\n\ntype MyOtherType = {\n  readonly prop: string;\n  readonly method: () => string;\n};\nfunction bar(arg: MyOtherType) {}\n```\n\n<!--/tabs-->\n\nExamples of **correct** code for this rule with `{treatMethodsAsReadonly: true}`:\n\n```ts\ntype MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n```\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}