{"pageProps":{"rule":"# `no-non-null-asserted-nullish-coalescing`\n\nDisallows using a non-null assertion in the left operand of the nullish coalescing operator.\n\n## Rule Details\n\nThe nullish coalescing operator is designed to provide a default value when dealing with `null` or `undefined`.\nUsing non-null assertions in the left operand of the nullish coalescing operator is redundant.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n/* eslint @typescript-eslint/no-non-null-asserted-nullish-coalescing: \"error\" */\n\nfoo! ?? bar;\nfoo.bazz! ?? bar;\nfoo!.bazz! ?? bar;\nfoo()! ?? bar;\n\nlet x!: string;\nx! ?? '';\n\nlet x: string;\nx = foo();\nx! ?? '';\n```\n\n### ‚úÖ Correct\n\n```ts\n/* eslint @typescript-eslint/no-non-null-asserted-nullish-coalescing: \"error\" */\n\nfoo ?? bar;\nfoo ?? bar!;\nfoo!.bazz ?? bar;\nfoo!.bazz ?? bar!;\nfoo() ?? bar;\n\n// This is considered correct code because there's no way for the user to satisfy it.\nlet x: string;\nx! ?? '';\n```\n\n## When Not To Use It\n\nIf you are not using TypeScript 3.7 (or greater), then you will not need to use this rule, as the nullish coalescing operator is not supported.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Nullish Coalescing Proposal](https://github.com/tc39/proposal-nullish-coalescing)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}