{"pageProps":{"rule":"# `explicit-function-return-type`\n\nRequire explicit return types on functions and class methods.\n\nExplicit types for function return values makes it clear to any calling code what type is returned.\nThis ensures that the return value is assigned to a variable of the correct type; or in the case\nwhere there is no return value, that the calling code doesn't try to use the undefined value when it\nshouldn't.\n\n## Rule Details\n\nThis rule aims to ensure that the values returned from functions are of the expected type.\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\n// Should indicate that no value is returned (void)\nfunction test() {\n  return;\n}\n\n// Should indicate that a number is returned\nvar fn = function () {\n  return 1;\n};\n\n// Should indicate that a string is returned\nvar arrowFn = () => 'test';\n\nclass Test {\n  // Should indicate that no value is returned (void)\n  method() {\n    return;\n  }\n}\n```\n\n### ✅ Correct\n\n```ts\n// No return value should be expected (void)\nfunction test(): void {\n  return;\n}\n\n// A return value of type number\nvar fn = function (): number {\n  return 1;\n};\n\n// A return value of type string\nvar arrowFn = (): string => 'test';\n\nclass Test {\n  // No return value should be expected (void)\n  method(): void {\n    return;\n  }\n}\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  // if true, only functions which are part of a declaration will be checked\n  allowExpressions?: boolean;\n  // if true, type annotations are also allowed on the variable of a function expression rather than on the function directly\n  allowTypedFunctionExpressions?: boolean;\n  // if true, functions immediately returning another function expression will not be checked\n  allowHigherOrderFunctions?: boolean;\n  // if true, arrow functions immediately returning a `as const` value will not be checked\n  allowDirectConstAssertionInArrowFunctions?: boolean;\n  // if true, concise arrow functions that start with the void keyword will not be checked\n  allowConciseArrowFunctionExpressionsStartingWithVoid?: boolean;\n  /**\n   * An array of function/method names that will not have their arguments or their return values checked.\n   */\n  allowedNames?: string[];\n};\n\nconst defaults = {\n  allowExpressions: false,\n  allowTypedFunctionExpressions: true,\n  allowHigherOrderFunctions: true,\n  allowDirectConstAssertionInArrowFunctions: true,\n  allowConciseArrowFunctionExpressionsStartingWithVoid: false,\n  allowedNames: [],\n};\n```\n\n### Configuring in a mixed JS/TS codebase\n\nIf you are working on a codebase within which you lint non-TypeScript code (i.e. `.js`/`.jsx`), you should ensure that you should use [ESLint `overrides`](https://eslint.org/docs/user-guide/configuring#disabling-rules-only-for-a-group-of-files) to only enable the rule on `.ts`/`.tsx` files. If you don't, then you will get unfixable lint errors reported within `.js`/`.jsx` files.\n\n```jsonc\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-function-return-type\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-function-return-type\": [\"error\"]\n      }\n    }\n  ]\n}\n```\n\n### `allowExpressions`\n\nExamples of code for this rule with `{ allowExpressions: true }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nfunction test() {}\n\nconst fn = () => {};\n\nexport default () => {};\n```\n\n#### ✅ Correct\n\n```ts\nnode.addEventListener('click', () => {});\n\nnode.addEventListener('click', function () {});\n\nconst foo = arr.map(i => i * i);\n```\n\n### `allowTypedFunctionExpressions`\n\nExamples of code for this rule with `{ allowTypedFunctionExpressions: true }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nlet arrowFn = () => 'test';\n\nlet funcExpr = function () {\n  return 'test';\n};\n\nlet objectProp = {\n  foo: () => 1,\n};\n```\n\n#### ✅ Correct\n\n```ts\ntype FuncType = () => string;\n\nlet arrowFn: FuncType = () => 'test';\n\nlet funcExpr: FuncType = function() {\n  return 'test';\n};\n\nlet asTyped = (() => '') as () => string;\nlet castTyped = <() => string>(() => '');\n\ninterface ObjectType {\n  foo(): number;\n}\nlet objectProp: ObjectType = {\n  foo: () => 1,\n};\nlet objectPropAs = {\n  foo: () => 1,\n} as ObjectType;\nlet objectPropCast = <ObjectType>{\n  foo: () => 1,\n};\n\ndeclare functionWithArg(arg: () => number);\nfunctionWithArg(() => 1);\n\ndeclare functionWithObjectArg(arg: { method: () => number });\nfunctionWithObjectArg({\n  method() {\n    return 1;\n  },\n});\n```\n\n### `allowHigherOrderFunctions`\n\nExamples of code for this rule with `{ allowHigherOrderFunctions: true }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nvar arrowFn = () => () => {};\n\nfunction fn() {\n  return function () {};\n}\n```\n\n#### ✅ Correct\n\n```ts\nvar arrowFn = () => (): void => {};\n\nfunction fn() {\n  return function (): void {};\n}\n```\n\n### `allowDirectConstAssertionInArrowFunctions`\n\nExamples of code for this rule with `{ allowDirectConstAssertionInArrowFunctions: true }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nconst func = (value: number) => ({ type: 'X', value } as any);\nconst func = (value: number) => ({ type: 'X', value } as Action);\n```\n\n#### ✅ Correct\n\n```ts\nconst func = (value: number) => ({ foo: 'bar', value } as const);\nconst func = () => x as const;\n```\n\n### `allowConciseArrowFunctionExpressionsStartingWithVoid`\n\nExamples of code for this rule with `{ allowConciseArrowFunctionExpressionsStartingWithVoid: true }`:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\nvar join = (a: string, b: string) => `${a}${b}`;\n\nconst log = (message: string) => {\n  console.log(message);\n};\n```\n\n#### ✅ Correct\n\n```ts\nvar log = (message: string) => void console.log(message);\n```\n\n### `allowedNames`\n\nYou may pass function/method names you would like this rule to ignore, like so:\n\n```json\n{\n  \"@typescript-eslint/explicit-function-return-type\": [\n    \"error\",\n    {\n      \"allowedNames\": [\"ignoredFunctionName\", \"ignoredMethodName\"]\n    }\n  ]\n}\n```\n\n## When Not To Use It\n\nIf you don't wish to prevent calling code from using function return values in unexpected ways, then\nyou will not need this rule.\n\n## Further Reading\n\n- TypeScript [Functions](https://www.typescriptlang.org/docs/handbook/functions.html#function-types)\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}