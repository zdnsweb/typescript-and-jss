{"pageProps":{"rule":"# `prefer-nullish-coalescing`\n\nEnforce the usage of the nullish coalescing operator instead of logical chaining.\n\nTypeScript 3.7 added support for the nullish coalescing operator.\nThis operator allows you to safely cascade a value when dealing with `null` or `undefined`.\n\n```ts\nfunction myFunc(foo: string | null) {\n  return foo ?? 'a string';\n}\n\n// is equivalent to\n\nfunction myFunc(foo: string | null) {\n  return foo !== null && foo !== undefined ? foo : 'a string';\n}\n```\n\nBecause the nullish coalescing operator _only_ coalesces when the original value is `null` or `undefined`, it is much safer than relying upon logical OR operator chaining `||`; which coalesces on any _falsy_ value:\n\n```ts\nconst emptyString = '';\n\nconst nullish1 = emptyString ?? 'unsafe';\nconst logical1 = emptyString || 'unsafe';\n\n// nullish1 === ''\n// logical1 === 'unsafe'\n\ndeclare const nullString: string | null;\n\nconst nullish2 = nullString ?? 'safe';\nconst logical2 = nullString || 'safe';\n\n// nullish2 === 'safe'\n// logical2 === 'safe'\n```\n\n## Rule Details\n\nThis rule aims enforce the usage of the safer operator.\n\n## Options\n\n```ts\ntype Options = [\n  {\n    ignoreConditionalTests?: boolean;\n    ignoreMixedLogicalExpressions?: boolean;\n  },\n];\n\nconst defaultOptions = [\n  {\n    ignoreConditionalTests: true,\n    ignoreMixedLogicalExpressions: true,\n  },\n];\n```\n\n### `ignoreConditionalTests`\n\nSetting this option to `true` (the default) will cause the rule to ignore any cases that are located within a conditional test.\n\nGenerally expressions within conditional tests intentionally use the falsy fallthrough behavior of the logical or operator, meaning that fixing the operator to the nullish coalesce operator could cause bugs.\n\nIf you're looking to enforce stricter conditional tests, you should consider using the `strict-boolean-expressions` rule.\n\nIncorrect code for `ignoreConditionalTests: false`, and correct code for `ignoreConditionalTests: true`:\n\n```ts\ndeclare const a: string | null;\ndeclare const b: string | null;\n\nif (a || b) {\n}\nwhile (a || b) {}\ndo {} while (a || b);\nfor (let i = 0; a || b; i += 1) {}\na || b ? true : false;\n```\n\nCorrect code for `ignoreConditionalTests: false`:\n\n```ts\ndeclare const a: string | null;\ndeclare const b: string | null;\n\nif (a ?? b) {\n}\nwhile (a ?? b) {}\ndo {} while (a ?? b);\nfor (let i = 0; a ?? b; i += 1) {}\na ?? b ? true : false;\n```\n\n### `ignoreMixedLogicalExpressions`\n\nSetting this option to `true` (the default) will cause the rule to ignore any logical or expressions that are part of a mixed logical expression (with `&&`).\n\nGenerally expressions within mixed logical expressions intentionally use the falsy fallthrough behavior of the logical or operator, meaning that fixing the operator to the nullish coalesce operator could cause bugs.\n\nIf you're looking to enforce stricter conditional tests, you should consider using the `strict-boolean-expressions` rule.\n\nIncorrect code for `ignoreMixedLogicalExpressions: false`, and correct code for `ignoreMixedLogicalExpressions: true`:\n\n```ts\ndeclare const a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na || (b && c);\n(a && b) || c || d;\na || (b && c) || d;\na || (b && c && d);\n```\n\nCorrect code for `ignoreMixedLogicalExpressions: false`:\n\n```ts\ndeclare const a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na ?? (b && c);\n(a && b) ?? c ?? d;\na ?? (b && c) ?? d;\na ?? (b && c && d);\n```\n\n**_NOTE:_** Errors for this specific case will be presented as suggestions (see below), instead of fixes. This is because it is not always safe to automatically convert `||` to `??` within a mixed logical expression, as we cannot tell the intended precedence of the operator. Note that by design, `??` requires parentheses when used with `&&` or `||` in the same expression.\n\n## When Not To Use It\n\nIf you are not using TypeScript 3.7 (or greater), then you will not be able to use this rule, as the operator is not supported.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Nullish Coalescing Operator Proposal](https://github.com/tc39/proposal-nullish-coalescing/)\n\n## Attributes\n\n- [ ] âœ… Recommended\n- [ ] ðŸ”§ Fixable\n- [x] ðŸ’­ Requires type information\n"},"__N_SSG":true}