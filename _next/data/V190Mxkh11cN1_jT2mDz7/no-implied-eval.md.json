{"pageProps":{"rule":"# `no-implied-eval`\n\nDisallow the use of `eval()`-like methods.\n\nIt's considered a good practice to avoid using `eval()`. There are security and performance implications involved with doing so, which is why many linters recommend disallowing `eval()`. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.\n\nThe first is using `setTimeout()`, `setInterval()`, `setImmediate` or `execScript()` (Internet Explorer only), all of which can accept a string of code as their first argument\n\n```ts\nsetTimeout('alert(`Hi!`);', 100);\n```\n\nor using `new Function()`\n\n```ts\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\nThis is considered an implied `eval()` because a string of code is\npassed in to be interpreted. The same can be done with `setInterval()`, `setImmediate()` and `execScript()`. All interpret the JavaScript code in the global scope.\n\nThe best practice is to avoid using `new Function()` or `execScript()` and always use a function for the first argument of `setTimeout()`, `setInterval()` and `setImmediate()`.\n\n## Rule Details\n\nThis rule aims to eliminate implied `eval()` through the use of `new Function()`, `setTimeout()`, `setInterval()`, `setImmediate()` or `execScript()`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n/* eslint @typescript-eslint/no-implied-eval: \"error\" */\n\nsetTimeout('alert(`Hi!`);', 100);\n\nsetInterval('alert(`Hi!`);', 100);\n\nsetImmediate('alert(`Hi!`)');\n\nexecScript('alert(`Hi!`)');\n\nwindow.setTimeout('count = 5', 10);\n\nwindow.setInterval('foo = bar', 10);\n\nconst fn = '() = {}';\nsetTimeout(fn, 100);\n\nconst fn = () => {\n  return 'x = 10';\n};\nsetTimeout(fn(), 100);\n\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\n### ‚úÖ Correct\n\n```ts\n/* eslint @typescript-eslint/no-implied-eval: \"error\" */\n\nsetTimeout(function () {\n  alert('Hi!');\n}, 100);\n\nsetInterval(function () {\n  alert('Hi!');\n}, 100);\n\nsetImmediate(function () {\n  alert('Hi!');\n});\n\nexecScript(function () {\n  alert('Hi!');\n});\n\nconst fn = () => {};\nsetTimeout(fn, 100);\n\nconst foo = {\n  fn: function () {},\n};\nsetTimeout(foo.fn, 100);\nsetTimeout(foo.fn.bind(this), 100);\n\nclass Foo {\n  static fn = () => {};\n}\n\nsetTimeout(Foo.fn, 100);\n```\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-implied-eval\": \"off\",\n  \"@typescript-eslint/no-implied-eval\": [\"error\"]\n}\n```\n\n## When Not To Use It\n\nIf you want to allow `new Function()` or `setTimeout()`, `setInterval()`, `setImmediate()` and `execScript()` with string arguments, then you can safely disable this rule.\n\n<sup>\n\nTaken with ‚ù§Ô∏è [from ESLint core](https://github.com/eslint/eslint/blob/main/docs/rules/no-implied-eval.md)\n\n</sup>\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}