{"pageProps":{"rule":"# `no-unsafe-assignment`\n\nDisallows assigning any to variables and properties.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nAssigning an `any` typed value to a variable can be hard to pick up on, particularly if it leaks in from an external library. Operations on the variable will not be checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase.\n\n## Rule Details\n\nThis rule disallows assigning `any` to a variable, and assigning `any[]` to an array destructuring.\nThis rule also compares the assigned type to the variable's type to ensure you don't assign an unsafe `any` in a generic position to a receiver that's expecting a specific type. For example, it will error if you assign `Set<any>` to a variable declared as `Set<string>`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nconst x = 1 as any,\n  y = 1 as any;\nconst [x] = 1 as any;\nconst [x] = [] as any[];\nconst [x] = [1 as any];\n[x] = [1] as [any];\n\nfunction foo(a = 1 as any) {}\nclass Foo {\n  constructor(private a = 1 as any) {}\n}\nclass Foo {\n  private a = 1 as any;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<any>();\nconst x: Map<string, string> = new Map<string, any>();\nconst x: Set<string[]> = new Set<any[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<any>>>();\n```\n\n### ‚úÖ Correct\n\n```ts\nconst x = 1,\n  y = 1;\nconst [x] = [1];\n[x] = [1] as [number];\n\nfunction foo(a = 1) {}\nclass Foo {\n  constructor(private a = 1) {}\n}\nclass Foo {\n  private a = 1;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<string>();\nconst x: Map<string, string> = new Map<string, string>();\nconst x: Set<string[]> = new Set<string[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<string>>>();\n```\n\n<!--/tabs-->\n\nThere are cases where the rule allows assignment of `any` to `unknown`.\n\nExample of `any` to `unknown` assignment that are allowed.\n\n```ts\nconst x: unknown = y as any;\nconst x: unknown[] = y as any[];\nconst x: Set<unknown> = y as Set<any>;\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-assignment\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Related To\n\n- [`no-explicit-any`](./no-explicit-any.md)\n- TSLint: [`no-unsafe-any`](https://palantir.github.io/tslint/rules/no-unsafe-any/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}