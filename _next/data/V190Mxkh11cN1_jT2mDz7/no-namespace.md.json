{"pageProps":{"rule":"# `no-namespace`\n\nDisallow the use of custom TypeScript modules and namespaces.\n\nCustom TypeScript modules (`module foo {}`) and namespaces (`namespace foo {}`) are considered outdated\nways to organize TypeScript code. ES2015 module syntax is now preferred (`import`/`export`).\n\nThis rule still allows the use of TypeScript module declarations to describe external APIs (`declare module 'foo' {}`).\n\n## Rule Details\n\nThis rule aims to standardize the way modules are declared.\n\n## Options\n\nThis rule, in its default state, does not require any argument. If you would like to enable one\nor more of the following you may pass an object with the options set as follows:\n\n- `allowDeclarations` set to `true` will allow you to `declare` custom TypeScript modules and namespaces (Default: `false`).\n- `allowDefinitionFiles` set to `true` will allow you to `declare` and use custom TypeScript modules and namespaces\n  inside definition files (Default: `true`).\n\nExamples of code for the default `{ \"allowDeclarations\": false, \"allowDefinitionFiles\": true }` options:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nmodule foo {}\nnamespace foo {}\n\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n### ‚úÖ Correct\n\n```ts\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n<!--/tabs-->\n\n### `allowDeclarations`\n\nExamples of code for the `{ \"allowDeclarations\": true }` option:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nmodule foo {}\nnamespace foo {}\n```\n\n#### ‚úÖ Correct\n\n```ts\ndeclare module 'foo' {}\ndeclare module foo {}\ndeclare namespace foo {}\n\ndeclare global {\n  namespace foo {}\n}\n\ndeclare module foo {\n  namespace foo {}\n}\n```\n\n<!--/tabs-->\n\nExamples of code for the `{ \"allowDeclarations\": false }` option:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n#### ‚úÖ Correct\n\n```ts\ndeclare module 'foo' {}\n```\n\n### `allowDefinitionFiles`\n\nExamples of code for the `{ \"allowDefinitionFiles\": true }` option:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\n// if outside a d.ts file\nmodule foo {}\nnamespace foo {}\n\n// if outside a d.ts file and allowDeclarations = false\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n#### ‚úÖ Correct\n\n```ts\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n## When Not To Use It\n\nIf you are using the ES2015 module syntax, then you will not need this rule.\n\n## Further Reading\n\n- [Modules](https://www.typescriptlang.org/docs/handbook/modules.html)\n- [Namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html)\n- [Namespaces and Modules](https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html)\n\n## Related To\n\n- TSLint: [no-namespace](https://palantir.github.io/tslint/rules/no-namespace/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}