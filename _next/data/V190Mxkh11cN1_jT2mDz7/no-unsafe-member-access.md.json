{"pageProps":{"rule":"# `no-unsafe-member-access`\n\nDisallows member access on any typed variables.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nMember access on `any` typed variables is not checked at all by TypeScript, so it creates a potential safety hole, and source of bugs in your codebase.\n\n## Rule Details\n\nThis rule disallows member access on any variable that is typed as `any`.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar.a;\nanyVar.a.b;\nanyVar['a'];\nanyVar['a']['b'];\n\nnestedAny.prop.a;\nnestedAny.prop['a'];\n\nconst key = 'a';\nnestedAny.prop[key];\n\n// Using an any to access a member is unsafe\nconst arr = [1, 2, 3];\narr[anyVar];\nnestedAny[anyVar];\n```\n\n### ‚úÖ Correct\n\n```ts\ndeclare const properlyTyped: { prop: { a: string } };\n\nproperlyTyped.prop.a;\nproperlyTyped.prop['a'];\n\nconst key = 'a';\nproperlyTyped.prop[key];\n\nconst arr = [1, 2, 3];\narr[1];\nconst idx = 1;\narr[idx];\narr[idx++];\n```\n\n## Options\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-member-access\": \"error\"\n  }\n}\n```\n\nThis rule is not configurable.\n\n## Related To\n\n- [`no-explicit-any`](./no-explicit-any.md)\n- TSLint: [`no-unsafe-any`](https://palantir.github.io/tslint/rules/no-unsafe-any/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}