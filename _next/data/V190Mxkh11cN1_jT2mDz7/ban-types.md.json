{"pageProps":{"rule":"# `ban-types`\n\nBans specific types from being used.\n\nSome builtin types have aliases, some types are considered dangerous or harmful.\nIt's often a good idea to ban certain types to help with consistency and safety.\n\n## Rule Details\n\nThis rule bans specific types and can suggest alternatives.\nNote that it does not ban the corresponding runtime objects from being used.\n\n## Options\n\n```ts\ntype Options = {\n  types?: {\n    [typeName: string]:\n      | false\n      | string\n      | {\n          message: string;\n          fixWith?: string;\n        };\n  };\n  extendDefaults?: boolean;\n};\n```\n\nThe rule accepts a single object as options, with the following keys:\n\n- `types` - An object whose keys are the types you want to ban, and the values are error messages.\n  - The type can either be a type name literal (`Foo`), a type name with generic parameter instantiation(s) (`Foo<Bar>`), the empty object literal (`{}`), or the empty tuple type (`[]`).\n  - The values can be a string, which is the error message to be reported, `false` to specifically disable this type\n    or it can be an object with the following properties:\n    - `message: string` - the message to display when the type is matched.\n    - `fixWith?: string` - a string to replace the banned type with when the fixer is run. If this is omitted, no fix will be done.\n- `extendDefaults` - if you're specifying custom `types`, you can set this to `true` to extend the default `types` configuration.\n  - This is a convenience option to save you copying across the defaults when adding another type.\n  - If this is `false`, the rule will _only_ use the types defined in your configuration.\n\nExample configuration:\n\n```jsonc\n{\n  \"@typescript-eslint/ban-types\": [\n    \"error\",\n    {\n      \"types\": {\n        // add a custom message to help explain why not to use it\n        \"Foo\": \"Don't use Foo because it is unsafe\",\n\n        // add a custom message, AND tell the plugin how to fix it\n        \"String\": {\n          \"message\": \"Use string instead\",\n          \"fixWith\": \"string\"\n        },\n\n        \"{}\": {\n          \"message\": \"Use object instead\",\n          \"fixWith\": \"object\"\n        }\n      }\n    }\n  ]\n}\n```\n\n### Default Options\n\nThe default options provide a set of \"best practices\", intended to provide safety and standardization in your codebase:\n\n- Don't use the upper-case primitive types, you should use the lower-case types for consistency.\n- Avoid the `Function` type, as it provides little safety for the following reasons:\n  - It provides no type safety when calling the value, which means it's easy to provide the wrong arguments.\n  - It accepts class declarations, which will fail when called, as they are called without the `new` keyword.\n- Avoid the `Object` and `{}` types, as they mean \"any non-nullish value\".\n  - This is a point of confusion for many developers, who think it means \"any object type\".\n  - See [this comment for more information](https://github.com/typescript-eslint/typescript-eslint/issues/2063#issuecomment-675156492).\n\n:::important\n\nThe default options suggest using `Record<string, unknown>`; this was a stylistic decision, as the built-in `Record` type is considered to look cleaner.\n\n:::\n\n<details>\n<summary>Default Options</summary>\n\n```ts\nconst defaultTypes = {\n  String: {\n    message: 'Use string instead',\n    fixWith: 'string',\n  },\n  Boolean: {\n    message: 'Use boolean instead',\n    fixWith: 'boolean',\n  },\n  Number: {\n    message: 'Use number instead',\n    fixWith: 'number',\n  },\n  Symbol: {\n    message: 'Use symbol instead',\n    fixWith: 'symbol',\n  },\n\n  Function: {\n    message: [\n      'The `Function` type accepts any function-like value.',\n      'It provides no type safety when calling the function, which can be a common source of bugs.',\n      'It also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.',\n      'If you are expecting the function to accept certain arguments, you should explicitly define the function shape.',\n    ].join('\\n'),\n  },\n\n  // object typing\n  Object: {\n    message: [\n      'The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.',\n      '- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.',\n      '- If you want a type meaning \"any value\", you probably want `unknown` instead.',\n    ].join('\\n'),\n  },\n  '{}': {\n    message: [\n      '`{}` actually means \"any non-nullish value\".',\n      '- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.',\n      '- If you want a type meaning \"any value\", you probably want `unknown` instead.',\n    ].join('\\n'),\n  },\n};\n```\n\n</details>\n\n### Examples\n\nExamples of code with the default options:\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\n// use lower-case primitives for consistency\nconst str: String = 'foo';\nconst bool: Boolean = true;\nconst num: Number = 1;\nconst symb: Symbol = Symbol('foo');\n\n// use a proper function type\nconst func: Function = () => 1;\n\n// use safer object types\nconst capitalObj1: Object = 1;\nconst capitalObj2: Object = { a: 'string' };\n\nconst curly1: {} = 1;\nconst curly2: {} = { a: 'string' };\n```\n\n#### ✅ Correct\n\n```ts\n// use lower-case primitives for consistency\nconst str: string = 'foo';\nconst bool: boolean = true;\nconst num: number = 1;\nconst symb: symbol = Symbol('foo');\n\n// use a proper function type\nconst func: () => number = () => 1;\n\n// use safer object types\nconst lowerObj: object = {};\n\nconst capitalObj1: number = 1;\nconst capitalObj2: { a: string } = { a: 'string' };\n\nconst curly1: number = 1;\nconst curly2: Record<'a', string> = { a: 'string' };\n```\n\n## Related To\n\n- TSLint: [ban-types](https://palantir.github.io/tslint/rules/ban-types)\n\n## Attributes\n\n- [x] ✅ Recommended\n- [x] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}