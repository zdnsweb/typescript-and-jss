{"pageProps":{"rule":"# `no-floating-promises`\n\nRequires Promise-like statements to be handled appropriately.\n\nA \"floating\" Promise is one that is created without any code set up to handle any errors it might throw.\n\nFloating Promises can cause several issues, such as improperly sequenced operations, ignored Promise rejections, and more.\n\nValid ways of handling a Promise-valued statement include:\n\n- `await`ing it\n- `return`ing it\n- Calling its `.then()` with two arguments\n- Calling its `.catch()` with one argument\n\n:::tip\n`no-floating-promises` only detects unhandled Promise _statements_.\nSee [`no-misused-promises`](./no-misused-promises.md) for detecting code that provides Promises to _logical_ locations such as if statements.\n:::\n\n## Rule Details\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\nconst promise = new Promise((resolve, reject) => resolve('value'));\npromise;\n\nasync function returnsPromise() {\n  return 'value';\n}\nreturnsPromise().then(() => {});\n\nPromise.reject('value').catch();\n\nPromise.reject('value').finally();\n```\n\n### ✅ Correct\n\n```ts\nconst promise = new Promise((resolve, reject) => resolve('value'));\nawait promise;\n\nasync function returnsPromise() {\n  return 'value';\n}\nreturnsPromise().then(\n  () => {},\n  () => {},\n);\n\nPromise.reject('value').catch(() => {});\n\nPromise.reject('value').finally(() => {});\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  // if true, checking void expressions will be skipped\n  ignoreVoid?: boolean;\n  // if true, checking for async iife will be skipped\n  ignoreIIFE?: boolean;\n};\n\nconst defaults = {\n  ignoreVoid: true,\n  ignoreIIFE: false,\n};\n```\n\n### `ignoreVoid`\n\nThis allows you to stop the rule reporting promises consumed with void operator.\nThis can be a good way to explicitly mark a promise as intentionally not awaited.\n\nExamples of **correct** code for this rule with `{ ignoreVoid: true }`:\n\n```ts\nasync function returnsPromise() {\n  return 'value';\n}\nvoid returnsPromise();\n\nvoid Promise.reject('value');\n```\n\nWith this option set to `true`, and if you are using `no-void`, you should turn on the [`allowAsStatement`](https://eslint.org/docs/rules/no-void#allowasstatement) option.\n\n### `ignoreIIFE`\n\nThis allows you to skip checking of async IIFEs (Immediately Invocated function Expressions).\n\nExamples of **correct** code for this rule with `{ ignoreIIFE: true }`:\n\n```ts\nawait(async function () {\n  await res(1);\n})();\n\n(async function () {\n  await res(1);\n})();\n```\n\n## When Not To Use It\n\nIf you do not use Promise-like values in your codebase, or want to allow them to remain unhandled.\n\n## Related To\n\n- [`no-misused-promises`](./no-misused-promises.md)\n- TSLint: ['no-floating-promises'](https://palantir.github.io/tslint/rules/no-floating-promises/)\n\n## Attributes\n\n- [x] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}