{"pageProps":{"rule":"# `prefer-function-type`\n\nUse function types instead of interfaces with call signatures.\n\n## Rule Details\n\nThis rule suggests using a function type instead of an interface or object type literal with a single call signature.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\ninterface Foo {\n  (): string;\n}\n```\n\n```ts\nfunction foo(bar: { (): number }): number {\n  return bar();\n}\n```\n\n```ts\ninterface Foo extends Function {\n  (): void;\n}\n```\n\n```ts\ninterface MixinMethod {\n  // returns the function itself, not the `this` argument.\n  (arg: string): this;\n}\n```\n\n### ‚úÖ Correct\n\n```ts\ninterface Foo {\n  (): void;\n  bar: number;\n}\n```\n\n```ts\nfunction foo(bar: { (): string; baz: number }): string {\n  return bar();\n}\n```\n\n```ts\ninterface Foo {\n  bar: string;\n}\ninterface Bar extends Foo {\n  (): void;\n}\n```\n\n```ts\n// returns the `this` argument of function, retaining it's type.\ntype MixinMethod = <TSelf>(this: TSelf, arg: string) => TSelf;\n// a function that returns itself is much clearer in this form.\ntype ReturnsSelf = (arg: string) => ReturnsSelf;\n```\n\n```ts\n// multiple call signatures (overloads) is allowed:\ninterface Overloaded {\n  (data: string): number;\n  (id: number): string;\n}\n// this is equivelent to Overloaded interface.\ntype Intersection = ((data: string) => number) & ((id: number) => string);\n```\n\n## When Not To Use It\n\nIf you specifically want to use an interface or type literal with a single call signature for stylistic reasons, you can disable this rule.\n\n## Further Reading\n\n- TSLint: [`callable-types`](https://palantir.github.io/tslint/rules/callable-types/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}