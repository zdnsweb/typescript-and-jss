{"pageProps":{"rule":"# `no-use-before-define`\n\nDisallow the use of variables before they are defined.\n\n## Rule Details\n\nThis rule extends the base [`eslint/no-use-before-define`](https://eslint.org/docs/rules/no-use-before-define) rule.\nIt adds support for `type`, `interface` and `enum` declarations.\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-use-before-define\": \"off\",\n  \"@typescript-eslint/no-use-before-define\": [\"error\"]\n}\n```\n\n## Options\n\nSee [`eslint/no-use-before-define` options](https://eslint.org/docs/rules/no-use-before-define#options).\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoUseBeforeDefineOptions {\n  enums?: boolean;\n  typedefs?: boolean;\n  ignoreTypeReferences?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoUseBeforeDefineDefaultOptions,\n  enums: true,\n  typedefs: true,\n  ignoreTypeReferences: true,\n};\n```\n\n### `enums`\n\nIf this is `true`, this rule warns every reference to a enum before the enum declaration.\nIf this is `false`, this rule will ignore references to enums, when the reference is in a child scope.\n\nExamples of code for the `{ \"enums\": true }` option:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\n/*eslint no-use-before-define: [\"error\", { \"enums\": true }]*/\n\nconst x = Foo.FOO;\n\nenum Foo {\n  FOO,\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\n/*eslint no-use-before-define: [\"error\", { \"enums\": false }]*/\n\nfunction foo() {\n  return Foo.FOO;\n}\n\nenum Foo {\n  FOO,\n}\n```\n\n### `typedefs`\n\nIf this is `true`, this rule warns every reference to a type before the type declaration.\nIf this is `false`, this rule will ignore references to types.\n\nExamples of **correct** code for the `{ \"typedefs\": false }` option:\n\n```ts\n/*eslint no-use-before-define: [\"error\", { \"typedefs\": false }]*/\n\nlet myVar: StringOrNumber;\ntype StringOrNumber = string | number;\n```\n\n### `ignoreTypeReferences`\n\nIf this is `true`, this rule ignores all type references, such as in type annotations and assertions.\nIf this is `false`, this will will check all type references.\n\nExamples of **correct** code for the `{ \"ignoreTypeReferences\": true }` option:\n\n```ts\n/*eslint no-use-before-define: [\"error\", { \"ignoreTypeReferences\": true }]*/\n\nlet var1: StringOrNumber;\ntype StringOrNumber = string | number;\n\nlet var2: Enum;\nenum Enum {}\n```\n\n### Other Options\n\nSee [`eslint/no-use-before-define` options](https://eslint.org/docs/rules/no-use-before-define#options).\n\n<sup>\n\nTaken with ‚ù§Ô∏è [from ESLint core](https://github.com/eslint/eslint/blob/main/docs/rules/no-use-before-define.md)\n\n</sup>\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}