{"pageProps":{"rule":"# `no-empty-interface`\n\nDisallow the declaration of empty interfaces.\n\nAn empty interface is equivalent to its supertype. If the interface does not implement a supertype, then\nthe interface is equivalent to an empty object (`{}`). In both cases it can be omitted.\n\n## Rule Details\n\nThis rule aims to ensure that only meaningful interfaces are declared in the code.\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n// an empty interface\ninterface Foo {}\n\n// an interface with only one supertype (Bar === Foo)\ninterface Bar extends Foo {}\n\n// an interface with an empty list of supertypes\ninterface Baz {}\n```\n\n### ‚úÖ Correct\n\n```ts\n// an interface with any number of members\ninterface Foo {\n  name: string;\n}\n\n// same as above\ninterface Bar {\n  age: number;\n}\n\n// an interface with more than one supertype\n// in this case the interface can be used as a replacement of a union type.\ninterface Baz extends Foo, Bar {}\n```\n\n<!--/tabs-->\n\n### Options\n\nThis rule accepts a single object option with the following default configuration:\n\n```json\n{\n  \"@typescript-eslint/no-empty-interface\": [\n    \"error\",\n    {\n      \"allowSingleExtends\": false\n    }\n  ]\n}\n```\n\n- `allowSingleExtends: true` will silence warnings about extending a single interface without adding additional members\n\n## When Not To Use It\n\nIf you don't care about having empty/meaningless interfaces, then you will not need this rule.\n\n## Related To\n\n- TSLint: [no-empty-interface](https://palantir.github.io/tslint/rules/no-empty-interface/)\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}