{"pageProps":{"rule":"# `no-this-alias`\n\nDisallow aliasing `this`.\n\nThis rule prohibits assigning variables to `this`.\n\n## Rule Details\n\nRationale from TSLint:\n\n> Assigning a variable to `this` instead of properly using arrow lambdas may be a symptom of pre-ES6 practices\n> or not managing scope well.\n>\n> Instead of storing a reference to `this` and using it inside a `function () {`:\n>\n> ```js\n> const self = this;\n>\n> setTimeout(function () {\n>   self.doWork();\n> });\n> ```\n>\n> Use `() =>` arrow lambdas, as they preserve `this` scope for you:\n>\n> ```js\n> setTimeout(() => {\n>   this.doWork();\n> });\n> ```\n\nExamples of **incorrect** code for this rule:\n\n(see the rationale above)\n\nExamples of **correct** code for this rule:\n\n(see the rationale above)\n\n## Options\n\nYou can pass an object option:\n\n```jsonc\n{\n  \"@typescript-eslint/no-this-alias\": [\n    \"error\",\n    {\n      \"allowDestructuring\": false, // Disallow `const { props, state } = this`; true by default\n      \"allowedNames\": [\"self\"] // Allow `const self = this`; `[]` by default\n    }\n  ]\n}\n```\n\n## When Not To Use It\n\nIf you need to assign `this` to variables, you shouldnâ€™t use this rule.\n\n## Related To\n\n- TSLint: [`no-this-assignment`](https://palantir.github.io/tslint/rules/no-this-assignment/)\n\n## Attributes\n\n- [x] âœ… Recommended\n- [ ] ðŸ”§ Fixable\n- [ ] ðŸ’­ Requires type information\n"},"__N_SSG":true}