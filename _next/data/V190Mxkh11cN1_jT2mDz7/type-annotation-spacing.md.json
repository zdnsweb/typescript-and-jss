{"pageProps":{"rule":"# `type-annotation-spacing`\n\nRequire consistent spacing around type annotations.\n\nSpacing around type annotations improves readability of the code. Although the most commonly used style guideline for type annotations in TypeScript prescribes adding a space after the colon, but not before it, it is subjective to the preferences of a project. For example:\n\n<!-- prettier-ignore -->\n```ts\n// with space after, but not before (default if no option is specified)\nlet foo: string = \"bar\";\n\n// with no spaces\nlet foo:string = \"bar\";\n\n// with space before and after\nlet foo : string = \"bar\";\n\n// with space before, but not after\nlet foo :string = \"bar\";\n\n// with spaces before and after the fat arrow (default if no option is specified)\ntype Foo = (string: name) => string;\n\n// with no spaces between the fat arrow\ntype Foo = (string: name)=>string;\n\n// with space after, but not before the fat arrow\ntype Foo = (string: name)=> string;\n\n// with space before, but not after the fat arrow\ntype Foo = (string: name) =>string;\n```\n\n## Rule Details\n\nThis rule aims to enforce specific spacing patterns around type annotations and function types in type literals.\n\n## Options\n\nThis rule has an object option:\n\n- `\"before\": false`, (default for colon) disallows spaces before the colon/arrow.\n- `\"before\": true`, (default for arrow) requires a space before the colon/arrow.\n- `\"after\": true`, (default) requires a space after the colon/arrow.\n- `\"after\": false`, disallows spaces after the colon/arrow.\n- `\"overrides\"`, overrides the default options for type annotations with `colon` (e.g. `const foo: string`) and function types with `arrow` (e.g. `type Foo = () => {}`). Additionally allows granular overrides for `variable` (`const foo: string`),`parameter` (`function foo(bar: string) {...}`),`property` (`interface Foo { bar: string }`) and `returnType` (`function foo(): string {...}`) annotations.\n\n### defaults\n\nExamples of code for this rule with no options at all:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n<!-- prettier-ignore -->\n```ts\nlet foo:string = \"bar\";\nlet foo :string = \"bar\";\nlet foo : string = \"bar\";\n\nfunction foo():string {}\nfunction foo() :string {}\nfunction foo() : string {}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n```\n\n#### ‚úÖ Correct\n\n<!-- prettier-ignore -->\n```ts\nlet foo: string = \"bar\";\n\nfunction foo(): string {}\n\nclass Foo {\n    name: string;\n}\n\ntype Foo = () => {};\n```\n\n### after\n\nExamples of code for this rule with `{ \"before\": false, \"after\": true }`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n<!-- prettier-ignore -->\n```ts\nlet foo:string = \"bar\";\nlet foo :string = \"bar\";\nlet foo : string = \"bar\";\n\nfunction foo():string {}\nfunction foo() :string {}\nfunction foo() : string {}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = () => {};\n```\n\n#### ‚úÖ Correct\n\n<!-- prettier-ignore -->\n```ts\nlet foo: string = \"bar\";\n\nfunction foo(): string {}\n\nclass Foo {\n    name: string;\n}\n\ntype Foo = ()=> {};\n```\n\n### before\n\nExamples of code for this rule with `{ \"before\": true, \"after\": true }` options:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n<!-- prettier-ignore -->\n```ts\nlet foo: string = \"bar\";\nlet foo:string = \"bar\";\nlet foo :string = \"bar\";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n```\n\n#### ‚úÖ Correct\n\n<!-- prettier-ignore -->\n```ts\nlet foo : string = \"bar\";\n\nfunction foo() : string {}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = () => {};\n```\n\n### overrides - colon\n\nExamples of code for this rule with `{ \"before\": false, \"after\": false, overrides: { colon: { before: true, after: true }} }` options:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n<!-- prettier-ignore -->\n```ts\nlet foo: string = \"bar\";\nlet foo:string = \"bar\";\nlet foo :string = \"bar\";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name:string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = () =>{};\ntype Foo = ()=> {};\ntype Foo = () => {};\n```\n\n#### ‚úÖ Correct\n\n<!-- prettier-ignore -->\n```ts\nlet foo : string = \"bar\";\n\nfunction foo() : string {}\n\nclass Foo {\n    name : string;\n}\n\ntype Foo = {\n    name: (name : string)=>string;\n}\n\ntype Foo = ()=>{};\n```\n\n### overrides - arrow\n\nExamples of code for this rule with `{ \"before\": false, \"after\": false, overrides: { arrow: { before: true, after: true }} }` options:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n<!-- prettier-ignore -->\n```ts\nlet foo: string = \"bar\";\nlet foo : string = \"bar\";\nlet foo :string = \"bar\";\n\nfunction foo(): string {}\nfunction foo():string {}\nfunction foo() :string {}\n\nclass Foo {\n    name: string;\n}\n\nclass Foo {\n    name : string;\n}\n\nclass Foo {\n    name :string;\n}\n\ntype Foo = ()=>{};\ntype Foo = () =>{};\ntype Foo = ()=> {};\n```\n\n#### ‚úÖ Correct\n\n<!-- prettier-ignore -->\n```ts\nlet foo:string = \"bar\";\n\nfunction foo():string {}\n\nclass Foo {\n    name:string;\n}\n\ntype Foo = () => {};\n```\n\n## When Not To Use It\n\nIf you don't want to enforce spacing for your type annotations, you can safely turn this rule off.\n\n## Further Reading\n\n- [TypeScript Type System](https://basarat.gitbooks.io/typescript/docs/types/type-system.html)\n- [Type Inference](https://www.typescriptlang.org/docs/handbook/type-inference.html)\n\n## Related To\n\n- TSLint: [`typedef-whitespace`](https://palantir.github.io/tslint/rules/typedef-whitespace/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}