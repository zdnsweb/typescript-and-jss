{"pageProps":{"rule":"# `no-throw-literal`\n\nDisallow throwing literals as exceptions.\n\nIt is considered good practice to only `throw` the `Error` object itself or an object using the `Error` object as base objects for user-defined exceptions.\nThe fundamental benefit of `Error` objects is that they automatically keep track of where they were built and originated.\n\nThis rule restricts what can be thrown as an exception. When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an `Error` object. With the `allowThrowingAny` and `allowThrowingUnknown`, it can be configured to only allow throwing values which are guaranteed to be an instance of `Error`.\n\n## Rule Details\n\nThis rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an `Error` object.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\n/*eslint @typescript-eslint/no-throw-literal: \"error\"*/\n\nthrow 'error';\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nconst err = new Error();\nthrow 'an ' + err;\n\nconst err = new Error();\nthrow `${err}`;\n\nconst err = '';\nthrow err;\n\nfunction err() {\n  return '';\n}\nthrow err();\n\nconst foo = {\n  bar: '',\n};\nthrow foo.bar;\n```\n\n### ‚úÖ Correct\n\n```ts\n/*eslint @typescript-eslint/no-throw-literal: \"error\"*/\n\nthrow new Error();\n\nthrow new Error(\"error\");\n\nconst e = new Error(\"error\");\nthrow e;\n\ntry {\n    throw new Error(\"error\");\n} catch (e) {\n    throw e;\n}\n\nconst err = new Error();\nthrow err;\n\nfunction err() {\n  return new Error();\n}\nthrow err();\n\nconst foo = {\n  bar: new Error();\n}\nthrow foo.bar;\n\nclass CustomError extends Error {\n  // ...\n};\nthrow new CustomError();\n```\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-throw-literal\": \"off\",\n  \"@typescript-eslint/no-throw-literal\": [\"error\"]\n}\n```\n\n### Options\n\n```jsonc\n{\n  \"@typescript-eslint/no-throw-literal\": [\n    \"error\",\n    {\n      \"allowThrowingAny\": true, // Default is to allow throwing values of type any\n      \"allowThrowingUnknown\": true // Default is to allow throwing values of type unknown\n    }\n  ]\n}\n```\n\n---\n\n<sup>\n\nTaken with ‚ù§Ô∏è [from ESLint core](https://github.com/eslint/eslint/blob/main/docs/rules/no-throw-literal.md)\n\n</sup>\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}