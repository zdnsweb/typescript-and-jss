{"pageProps":{"rule":"# `restrict-template-expressions`\n\nEnforce template literal expressions to be of string type.\n\n## Rule Details\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nconst arg1 = [1, 2];\nconst msg1 = `arg1 = ${arg1}`;\n\nconst arg2 = { name: 'Foo' };\nconst msg2 = `arg2 = ${arg2 || null}`;\n```\n\n### ‚úÖ Correct\n\n```ts\nconst arg = 'foo';\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'default'}`;\n\nconst stringWithKindProp: string & { _kind?: 'MyString' } = 'foo';\nconst msg3 = `stringWithKindProp = ${stringWithKindProp}`;\n```\n\n## Options\n\nThe rule accepts an options object with the following properties:\n\n```ts\ntype Options = {\n  // if true, also allow number type in template expressions\n  allowNumber?: boolean;\n  // if true, also allow boolean type in template expressions\n  allowBoolean?: boolean;\n  // if true, also allow any in template expressions\n  allowAny?: boolean;\n  // if true, also allow null and undefined in template expressions\n  allowNullish?: boolean;\n  // if true, also allow RegExp in template expressions\n  allowRegExp?: boolean;\n};\n\nconst defaults = {\n  allowNumber: true,\n  allowBoolean: false,\n  allowAny: false,\n  allowNullish: false,\n  allowRegExp: false,\n};\n```\n\n### `allowNumber`\n\nExamples of additional **correct** code for this rule with `{ allowNumber: true }`:\n\n```ts\nconst arg = 123;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'zero'}`;\n```\n\n### `allowBoolean`\n\nExamples of additional **correct** code for this rule with `{ allowBoolean: true }`:\n\n```ts\nconst arg = true;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'not truthy'}`;\n```\n\n### `allowAny`\n\nExamples of additional **correct** code for this rule with `{ allowAny: true }`:\n\n```ts\nconst user = JSON.parse('{ \"name\": \"foo\" }');\nconst msg1 = `arg = ${user.name}`;\nconst msg2 = `arg = ${user.name || 'the user with no name'}`;\n```\n\n### `allowNullish`\n\nExamples of additional **correct** code for this rule with `{ allowNullish: true }`:\n\n```ts\nconst arg = condition ? 'ok' : null;\nconst msg1 = `arg = ${arg}`;\n```\n\n### `allowRegExp`\n\nExamples of additional **correct** code for this rule with `{ allowRegExp: true }`:\n\n```ts\nconst arg = new RegExp('foo');\nconst msg1 = `arg = ${arg}`;\n```\n\n```ts\nconst arg = /foo/;\nconst msg1 = `arg = ${arg}`;\n```\n\n## Attributes\n\n- [x] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}