{"pageProps":{"rule":"# `no-base-to-string`\n\nRequires that `.toString()` is only called on objects which provide useful information when stringified.\n\nJavaScript will call `toString()` on an object when it is converted to a string, such as when `+` adding to a string or in `${}` template literals.\n\nThe default Object `.toString()` returns `\"[object Object]\"`, so this rule requires stringified objects define a more useful `.toString()` method.\n\nNote that `Function` provides its own `.toString()` that returns the function's code.\nFunctions are not flagged by this rule.\n\nThis rule has some overlap with [`restrict-plus-operands`](./restrict-plus-operands.md) and [`restrict-template-expressions`](./restrict-template-expressions.md).\n\n## Rule Details\n\nThis rule prevents accidentally defaulting to the base Object `.toString()` method.\n\n<!--tabs-->\n\n### ❌ Incorrect\n\n```ts\n// Passing an object or class instance to string concatenation:\n'' + {};\n\nclass MyClass {}\nconst value = new MyClass();\nvalue + '';\n\n// Interpolation and manual .toString() calls too:\n`Value: ${value}`;\n({}.toString());\n```\n\n### ✅ Correct\n\n```ts\n// These types all have useful .toString()s\n'Text' + true;\n`Value: ${123}`;\n`Arrays too: ${[1, 2, 3]}`;\n(() => {}).toString();\n\n// Defining a custom .toString class is considered acceptable\nclass CustomToString {\n  toString() {\n    return 'Hello, world!';\n  }\n}\n`Value: ${new CustomToString()}`;\n\nconst literalWithToString = {\n  toString: () => 'Hello, world!',\n};\n\n`Value: ${literalWithToString}`;\n```\n\n## Options\n\n```ts\ntype Options = {\n  ignoredTypeNames?: string[];\n};\n\nconst defaultOptions: Options = {\n  ignoredTypeNames: ['RegExp'],\n};\n```\n\n### `ignoredTypeNames`\n\nA string array of type names to ignore, this is useful for types missing `toString()` (but actually has `toString()`).\nThere are some types missing `toString()` in old version TypeScript, like `RegExp`, `URL`, `URLSearchParams` etc.\n\nThe following patterns are considered correct with the default options `{ ignoredTypeNames: [\"RegExp\"] }`:\n\n```ts\n`${/regex/}`;\n'' + /regex/;\n/regex/.toString();\nlet value = /regex/;\nvalue.toString();\nlet text = `${value}`;\n```\n\n## When Not To Use It\n\nIf you don't mind `\"[object Object]\"` in your strings, then you will not need this rule.\n\n- [`Object.prototype.toString()` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [x] 💭 Requires type information\n"},"__N_SSG":true}