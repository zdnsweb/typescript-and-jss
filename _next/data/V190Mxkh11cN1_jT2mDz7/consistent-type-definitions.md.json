{"pageProps":{"rule":"# `consistent-type-definitions`\n\nConsistent with type definition either `interface` or `type`.\n\nThere are two ways to define a type.\n\n```ts\n// type alias\ntype T1 = {\n  a: string;\n  b: number;\n};\n\n// interface keyword\ninterface T2 {\n  a: string;\n  b: number;\n}\n```\n\n## Options\n\nThis rule accepts one string option:\n\n- `\"interface\"`: enforce using `interface`s for object type definitions.\n- `\"type\"`: enforce using `type`s for object type definitions.\n\nFor example:\n\n```jsonc\n{\n  // Use type for object definitions\n  \"@typescript-eslint/consistent-type-definitions\": [\"error\", \"type\"]\n}\n```\n\n### `interface`\n\nExamples of code with `interface` option.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ntype T = { x: number };\n```\n\n#### ‚úÖ Correct\n\n```ts\ntype T = string;\ntype Foo = string | {};\n\ninterface T {\n  x: number;\n}\n```\n\n### `type`\n\nExamples of code with `type` option.\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ninterface T {\n  x: number;\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\ntype T = { x: number };\n```\n\n## When Not To Use It\n\nIf you specifically want to use an interface or type literal for stylistic reasons, you can disable this rule.\n\n## Related To\n\n- TSLint: [interface-over-type-literal](https://palantir.github.io/tslint/rules/interface-over-type-literal/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}