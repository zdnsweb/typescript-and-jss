{"pageProps":{"rule":"# `no-unnecessary-boolean-literal-compare`\n\nFlags unnecessary equality comparisons against boolean literals.\n\nComparing boolean values to boolean literals is unnecessary, those comparisons result in the same booleans. Using the boolean values directly, or via a unary negation (`!value`), is more concise and clearer.\n\n## Rule Details\n\nThis rule ensures that you do not include unnecessary comparisons with boolean literals.\nA comparison is considered unnecessary if it checks a boolean literal against any variable with just the `boolean` type.\nA comparison is **_not_** considered unnecessary if the type is a union of booleans (`string | boolean`, `someObject | boolean`).\n\n**Warning**: Do not use this rule when `strictNullChecks` is disabled.\nESLint is not able to distinguish between `false` and `undefined` or `null` values.\nThis can cause unintended code changes when using autofix.\n\n**Note**: Throughout this page, only strict equality (`===` and `!==`) are\nused in the examples. However, the implementation of the rule does not\ndistinguish between strict and loose equality. Any example below that uses\n`===` would be treated the same way if `==` was used, and any example below\nthat uses `!==` would be treated the same way if `!=` was used.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\ndeclare const someCondition: boolean;\nif (someCondition === true) {\n}\n```\n\n### ‚úÖ Correct\n\n```ts\ndeclare const someCondition: boolean;\nif (someCondition) {\n}\n\ndeclare const someObjectBoolean: boolean | Record<string, unknown>;\nif (someObjectBoolean === true) {\n}\n\ndeclare const someStringBoolean: boolean | string;\nif (someStringBoolean === true) {\n}\n```\n\n## Options\n\nThe rule accepts an options object with the following properties.\n\n```ts\ntype Options = {\n  // if false, comparisons between a nullable boolean variable to `true` will be checked and fixed\n  allowComparingNullableBooleansToTrue?: boolean;\n  // if false, comparisons between a nullable boolean variable to `false` will be checked and fixed\n  allowComparingNullableBooleansToFalse?: boolean;\n};\n```\n\n### Defaults\n\nThis rule always checks comparisons between a boolean variable and a boolean\nliteral. Comparisons between nullable boolean variables and boolean literals\nare **not** checked by default.\n\n```ts\nconst defaults = {\n  allowComparingNullableBooleansToTrue: true,\n  allowComparingNullableBooleansToFalse: true,\n};\n```\n\n### `allowComparingNullableBooleansToTrue`\n\nExamples of code for this rule with `{ allowComparingNullableBooleansToTrue: false }`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === true) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== true) {\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (!someNullCondition) {\n}\n```\n\n### `allowComparingNullableBooleansToFalse`\n\nExamples of code for this rule with `{ allowComparingNullableBooleansToFalse: false }`:\n\n<!--tabs-->\n\n#### ‚ùå Incorrect\n\n```ts\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === false) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== false) {\n}\n```\n\n#### ‚úÖ Correct\n\n```ts\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition ?? true) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (!(someNullCondition ?? true)) {\n}\n```\n\n## Fixer\n\n|           Comparison           | Fixer Output                    | Notes                                                                               |\n| :----------------------------: | ------------------------------- | ----------------------------------------------------------------------------------- |\n|     `booleanVar === true`      | `booleanVar`                    |                                                                                     |\n|     `booleanVar !== true`      | `!booleanVar`                   |                                                                                     |\n|     `booleanVar === false`     | `!booleanVar`                   |                                                                                     |\n|     `booleanVar !== false`     | `booleanVar`                    |                                                                                     |\n| `nullableBooleanVar === true`  | `nullableBooleanVar`            | Only checked/fixed if the `allowComparingNullableBooleansToTrue` option is `false`  |\n| `nullableBooleanVar !== true`  | `!nullableBooleanVar`           | Only checked/fixed if the `allowComparingNullableBooleansToTrue` option is `false`  |\n| `nullableBooleanVar === false` | `nullableBooleanVar ?? true`    | Only checked/fixed if the `allowComparingNullableBooleansToFalse` option is `false` |\n| `nullableBooleanVar !== false` | `!(nullableBooleanVar ?? true)` | Only checked/fixed if the `allowComparingNullableBooleansToFalse` option is `false` |\n\n## Related To\n\n- TSLint: [no-boolean-literal-compare](https://palantir.github.io/tslint/rules/no-boolean-literal-compare)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [x] üîß Fixable\n- [x] üí≠ Requires type information\n"},"__N_SSG":true}