{"pageProps":{"rule":"# `method-signature-style`\n\nEnforces using a particular method signature syntax..\n\nThere are two ways to define an object/interface function property.\n\n```ts\n// method shorthand syntax\ninterface T1 {\n  func(arg: string): number;\n}\n\n// regular property with function type\ninterface T2 {\n  func: (arg: string) => number;\n}\n```\n\nA good practice is to use the TypeScript's `strict` option (which implies `strictFunctionTypes`) which enables correct typechecking for function properties only (method signatures get old behavior).\n\nTypeScript FAQ:\n\n> A method and a function property of the same type behave differently.\n> Methods are always bivariant in their argument, while function properties are contravariant in their argument under `strictFunctionTypes`.\n\nSee the reasoning behind that in the [TypeScript PR for the compiler option](https://github.com/microsoft/TypeScript/pull/18654).\n\n## Options\n\nThis rule accepts one string option:\n\n- `\"property\"`: Enforce using property signature for functions. Use this to enforce maximum correctness together with TypeScript's strict mode.\n- `\"method\"`: Enforce using method signature for functions. Use this if you aren't using TypeScript's strict mode and prefer this style.\n\nThe default is `\"property\"`.\n\n### `property`\n\nExamples of code with `property` option.\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\ninterface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\ninterface T3 {\n  func(arg: number): void;\n  func(arg: string): void;\n  func(arg: boolean): void;\n}\n```\n\n#### ✅ Correct\n\n```ts\ninterface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n// this is equivalent to the overload\ninterface T3 {\n  func: ((arg: number) => void) &\n    ((arg: string) => void) &\n    ((arg: boolean) => void);\n}\n```\n\n### `method`\n\nExamples of code with `method` option.\n\n<!--tabs-->\n\n#### ❌ Incorrect\n\n```ts\ninterface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n```\n\n#### ✅ Correct\n\n```ts\ninterface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a particular style for object/interface function types, and/or if you don't use `strictFunctionTypes`, then you don't need this rule.\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [x] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}