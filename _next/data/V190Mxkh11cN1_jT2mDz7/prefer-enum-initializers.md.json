{"pageProps":{"rule":"# `prefer-enum-initializers`\n\nPrefer initializing each enums member value.\n\nThis rule recommends having each `enum`s member value explicitly initialized.\n\n`enum`s are a practical way to organize semantically related constant values. However, by implicitly defining values, `enum`s can lead to unexpected bugs if it's modified without paying attention to the order of its items.\n\n## Rule Details\n\n`enum`s infers sequential numbers automatically when initializers are omitted:\n\n```ts\nenum Status {\n  Open, // infer 0\n  Closed, // infer 1\n}\n```\n\nIf a new member is added to the top of `Status`, both `Open` and `Closed` would have its values altered:\n\n```ts\nenum Status {\n  Pending, // infer 0\n  Open, // infer 1\n  Closed, // infer 2\n}\n```\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\nenum Status {\n  Open = 1,\n  Close,\n}\n\nenum Direction {\n  Up,\n  Down,\n}\n\nenum Color {\n  Red,\n  Green = 'Green'\n  Blue = 'Blue',\n}\n```\n\n### ‚úÖ Correct\n\n```ts\nenum Status {\n  Open = 'Open',\n  Close = 'Close',\n}\n\nenum Direction {\n  Up = 1,\n  Down = 2,\n}\n\nenum Color {\n  Red = 'Red',\n  Green = 'Green',\n  Blue = 'Blue',\n}\n```\n\n## When Not To Use It\n\nIf you don't care about `enum`s having implicit values you can safely disable this rule.\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}