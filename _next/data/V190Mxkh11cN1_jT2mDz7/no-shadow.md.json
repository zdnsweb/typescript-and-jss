{"pageProps":{"rule":"# `no-shadow`\n\nDisallow variable declarations from shadowing variables declared in the outer scope.\n\n## Rule Details\n\nThis rule extends the base [`eslint/no-shadow`](https://eslint.org/docs/rules/no-shadow) rule.\nIt adds support for TypeScript's `this` parameters and global augmentation, and adds options for TypeScript features.\n\n## How to Use\n\n```jsonc\n{\n  // note you must disable the base rule as it can report incorrect errors\n  \"no-shadow\": \"off\",\n  \"@typescript-eslint/no-shadow\": [\"error\"]\n}\n```\n\n## Options\n\nSee [`eslint/no-shadow` options](https://eslint.org/docs/rules/no-shadow#options).\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoShadowOptions {\n  ignoreTypeValueShadow?: boolean;\n  ignoreFunctionTypeParameterNameValueShadow?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoShadowDefaultOptions,\n  ignoreTypeValueShadow: true,\n  ignoreFunctionTypeParameterNameValueShadow: true,\n};\n```\n\n### `ignoreTypeValueShadow`\n\nWhen set to `true`, the rule will ignore the case when you name a type the same as a variable.\n\nTypeScript allows types and variables to shadow one-another. This is generally safe because you cannot use variables in type locations without a `typeof` operator, so there's little risk of confusion.\n\nExamples of **correct** code with `{ ignoreTypeValueShadow: true }`:\n\n```ts\ntype Foo = number;\nconst Foo = 1;\n\ninterface Bar {\n  prop: number;\n}\nconst Bar = 'test';\n```\n\n### `ignoreFunctionTypeParameterNameValueShadow`\n\nWhen set to `true`, the rule will ignore the case when you name a function type argument the same as a variable.\n\nEach of a function type's arguments creates a value variable within the scope of the function type. This is done so that you can reference the type later using the `typeof` operator:\n\n```ts\ntype Func = (test: string) => typeof test;\n\ndeclare const fn: Func;\nconst result = fn('str'); // typeof result === string\n```\n\nThis means that function type arguments shadow value variable names in parent scopes:\n\n```ts\nlet test = 1;\ntype TestType = typeof test; // === number\ntype Func = (test: string) => typeof test; // this \"test\" references the argument, not the variable\n\ndeclare const fn: Func;\nconst result = fn('str'); // typeof result === string\n```\n\nIf you do not use the `typeof` operator in a function type return type position, you can safely turn this option on.\n\nExamples of **correct** code with `{ ignoreFunctionTypeParameterNameValueShadow: true }`:\n\n```ts\nconst test = 1;\ntype Func = (test: string) => typeof test;\n```\n\n<sup>\n\nTaken with ❤️ [from ESLint core](https://github.com/eslint/eslint/blob/main/docs/rules/no-shadow.md)\n\n</sup>\n\n## Attributes\n\n- [ ] ✅ Recommended\n- [ ] 🔧 Fixable\n- [ ] 💭 Requires type information\n"},"__N_SSG":true}