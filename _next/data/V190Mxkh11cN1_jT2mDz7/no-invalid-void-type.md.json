{"pageProps":{"rule":"# `no-invalid-void-type`\n\nDisallows usage of `void` type outside of generic or return types.\n\nDisallows usage of `void` type outside of return types or generic type arguments.\nIf `void` is used as return type, it shouldn‚Äôt be a part of intersection/union type with most other types.\n\n## Rationale\n\nThe `void` type means ‚Äúnothing‚Äù or that a function does not return any value,\nin contrast with implicit `undefined` type which means that a function returns a value `undefined`.\nSo ‚Äúnothing‚Äù cannot be mixed with any other types, other than `never`, which accepts all types.\nIf you need this - use the `undefined` type instead.\n\n## Rule Details\n\nThis rule aims to ensure that the `void` type is only used in valid places.\n\nExamples of code for this rule:\n\n<!--tabs-->\n\n### ‚ùå Incorrect\n\n```ts\ntype PossibleValues = string | number | void;\ntype MorePossibleValues = string | ((number & any) | (string | void));\n\nfunction logSomething(thing: void) {}\nfunction printArg<T = void>(arg: T) {}\n\nlogAndReturn<void>(undefined);\n\ninterface Interface {\n  lambda: () => void;\n  prop: void;\n}\n\nclass MyClass {\n  private readonly propName: void;\n}\n```\n\n### ‚úÖ Correct\n\n```ts\ntype NoOp = () => void;\n\nfunction noop(): void {}\n\nlet trulyUndefined = void 0;\n\nasync function promiseMeSomething(): Promise<void> {}\n\ntype stillVoid = void | never;\n```\n\n## Options\n\n```ts\ninterface Options {\n  allowInGenericTypeArguments?: boolean | string[];\n  allowAsThisParameter?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allowInGenericTypeArguments: true,\n  allowAsThisParameter: false,\n};\n```\n\n### `allowInGenericTypeArguments`\n\nThis option lets you control if `void` can be used as a valid value for generic type parameters.\n\nAlternatively, you can provide an array of strings which whitelist which types may accept `void` as a generic type parameter.\n\nAny types considered valid by this option will be considered valid as part of a union type with `void`.\n\nThis option is `true` by default.\n\nThe following patterns are considered warnings with `{ allowInGenericTypeArguments: false }`:\n\n```ts\nlogAndReturn<void>(undefined);\n\nlet voidPromise: Promise<void> = new Promise<void>(() => {});\nlet voidMap: Map<string, void> = new Map<string, void>();\n```\n\nThe following patterns are considered warnings with `{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }`:\n\n```ts\nlogAndReturn<void>(undefined);\n\ntype NotAllowedVoid1 = Mx.Tx<void>;\ntype NotAllowedVoid2 = Tx<void>;\ntype NotAllowedVoid3 = Promise<void>;\n```\n\nThe following patterns are not considered warnings with `{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }`:\n\n```ts\ntype AllowedVoid = Ex.Mx.Tx<void>;\ntype AllowedVoidUnion = void | Ex.Mx.Tx<void>;\n```\n\n### `allowAsThisParameter`\n\nThis option allows specifying a `this` parameter of a function to be `void` when set to `true`.\nThis pattern can be useful to explicitly label function types that do not use a `this` argument. [See the TypeScript docs for more information](https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters-in-callbacks).\n\nThis option is `false` by default.\n\nThe following patterns are considered warnings with `{ allowAsThisParameter: false }` but valid with `{ allowAsThisParameter: true }`:\n\n```ts\nfunction doThing(this: void) {}\nclass Example {\n  static helper(this: void) {}\n  callback(this: void) {}\n}\n```\n\n## When Not To Use It\n\nIf you don't care about if `void` is used with other types,\nor in invalid places, then you don't need this rule.\n\n## Related To\n\n- TSLint: [invalid-void](https://palantir.github.io/tslint/rules/invalid-void/)\n\n## Attributes\n\n- [ ] ‚úÖ Recommended\n- [ ] üîß Fixable\n- [ ] üí≠ Requires type information\n"},"__N_SSG":true}